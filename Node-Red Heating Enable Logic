// Retrieve global context values
var ElementMUA1 = global.get('ElementMua1');
var TargetTemp = global.get('TargetTemp');
var OutdoorHumidity = global.get('OutdoorHumidity');
var isAway = global.get('ghostThermostat.away');  // Retrieve the 'away' status from global context

// Save the current value of OutdoorHumidity to node context for debugging
context.set('OutdoorHumidity', OutdoorHumidity);

// Set humidity thresholds for dehumidification
var humidityMin = 50;  // Minimum humidity threshold for dehumidification
var humidityMax = 90;  // Maximum humidity threshold for dehumidification

// If the incoming msg.payload is 0, pass it directly as a shutdown command
if (msg.payload === 0) {
    node.status({ fill: "red", shape: "ring", text: "Shutdown command received" });
    return msg;  // Pass the shutdown command to the next node
}

// If the thermostat is set to 'away', send 0 as the payload
if (isAway) {
    msg.payload = 0;  // Set payload to 0 if 'away' is true
    node.status({ fill: "yellow", shape: "ring", text: "Thermostat is away, no heating or dehumidification" });
    return msg;  // Pass the modified payload to the next node
}

// Default state for payload
msg.payload = 0;

// Check if dehumidification is needed based on OutdoorHumidity
if (OutdoorHumidity > humidityMin && OutdoorHumidity < humidityMax) {
    msg.payload = 1;  // Set a unique payload value for dehumidification
    node.status({ fill: "blue", shape: "dot", text: "Dehumidification needed, OutdoorHumidity in range" });
}

// Check for heating conditions
var TempDifference = TargetTemp - ElementMUA1;
// Heating logic based on TempDifference
if (TempDifference >= 1.4) {  // Heating needed when difference is positive and large enough
    msg.payload = 1;  // Heating on
    node.status({ fill: "blue", shape: "dot", text: "Heating needed, diff >= 1.4" });
} else if (msg.payload === 0) {
    // If no dehumidification or heating needed
    node.status({ fill: "red", shape: "ring", text: "No heating needed, diff < 1.4" });
}

// Return the modified message (either dehumidification, heating, or shutdown)
return msg;
