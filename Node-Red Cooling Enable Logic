// Retrieve global context values
var ElementMUA1 = global.get('ElementMua1');
var TargetTemp = global.get('TargetTemp');
var isAway = global.get('ghostThermostat.away'); // Retrieve the 'away' status from global context
var freezeTrip = global.get('freezeTrip'); // Retrieve the freeze trip status from global context

// Log the retrieved values for debugging
node.warn("ElementMUA1: " + ElementMUA1 + ", TargetTemp: " + TargetTemp + ", isAway: " + isAway + ", freezeTrip: " + freezeTrip);

// Check if the freeze trip has occurred
if (freezeTrip) {
    msg.payload = 0; // Disable cooling if freezeTrip is true
    node.status({ fill: "red", shape: "ring", text: "Freeze stat tripped, no cooling" });
    return msg; // Stop further processing if freeze trip is active
}

// Check if the thermostat is set to 'away'
if (isAway) {
    msg.payload = 0; // Set payload to 0 if 'away' is true
    node.status({ fill: "yellow", shape: "ring", text: "Thermostat is away, no cooling" });
} else {
    // Only proceed with checking temperature difference if not in 'away' mode
    if (msg.payload === 1) {
        var TempDifference = ElementMUA1 - TargetTemp;

        // Store the differential in the node context
        context.set('CoolingDifferential', TempDifference);

        // Set node status based on TempDifference
        if (TempDifference > 1.5) {
            msg.payload = 1;
            node.status({ fill: "green", shape: "dot", text: "Cooling needed, diff > 1.5" });
        } else {
            msg.payload = 0;
            node.status({ fill: "red", shape: "ring", text: "No cooling needed, diff <= 1.5" });
        }
    } else if (msg.payload === 0) {
        // If msg.payload is 0, ensure that it explicitly shows no cooling
        msg.payload = 0;
        node.status({ fill: "red", shape: "ring", text: "Cooling disabled by payload" });
    } else {
        // Default case to ensure the status is cleared
        msg.payload = 0;
        node.status({});
    }
}

// Return the modified message
return msg;
