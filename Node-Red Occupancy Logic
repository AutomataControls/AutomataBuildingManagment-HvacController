// Retrieve the current time from the global context and log it for debugging
var currentTimeString = global.get("CurrentTime");
console.log("Current Time from Global Context:", currentTimeString);

if (!currentTimeString) {
    console.log("Error: Current time string is undefined.");
    node.status({fill:"yellow", shape:"ring", text:"Error: Time undefined"});
    return; // Stop execution if the time is not defined
}

// Create a Date object from the timestamp directly
var currentTime = new Date(currentTimeString);
var localHour = currentTime.getHours(); // Directly use the hours as they are the correct local time
console.log("Current Local Hour:", localHour);

// Retrieve the user-defined 'away' start time or default to 18
var awayStartTime = global.get("awayStartTime") || 10;

// Initialize outputs
var msg = { payload: null, topic: null };
var secondOutput = { payload: null, topic: null };
var thirdOutput = { payload: null, topic: null };
var fourthOutput = { payload: null, topic: null };
var nodeStatus = { fill: "", shape: "ring", text: "" };

// Check if the current hour falls within the "away" period (after 'awayStartTime' or before 07:00)
if (localHour + 5 >= awayStartTime || localHour + 5 < 4) {
    msg.payload = true;
    msg.topic = "away";
    secondOutput.payload = 73; // Set target temperature for away mode
    secondOutput.topic = "target_temperature";
    thirdOutput.payload = "off"; // Turn off HVAC in away mode
    thirdOutput.topic = "hvac_state";
    fourthOutput.payload = 0; // Turn off the fan in away mode
    fourthOutput.topic = "fan";
    nodeStatus.fill = "red";
    nodeStatus.text = "Away";
    console.log("Setting to Away Mode");
} else {
    msg.payload = false;
    msg.topic = "away";
    secondOutput.payload = 62; // Set target temperature for present mode
    secondOutput.topic = "target_temperature";
    thirdOutput.payload = "cooling"; // Set HVAC to cooling in present mode
    thirdOutput.topic = "hvac_state";
    fourthOutput.payload = 1; // Turn on the fan in present mode
    fourthOutput.topic = "fan";
    nodeStatus.fill = "green";
    nodeStatus.text = "Present";
    console.log("Setting to Present Mode");
}

// Update and save node status
node.status(nodeStatus);

// Log final values for further debugging
console.log("Final msg Object:", msg);
console.log("Final secondOutput Object:", secondOutput);
console.log("Final Third Output Object:", thirdOutput);
console.log("Final Fourth Output Object:", fourthOutput);
console.log("Final Node Status:", nodeStatus);

return [msg, secondOutput, thirdOutput, fourthOutput];
