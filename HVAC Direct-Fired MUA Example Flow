[
    {
        "id": "1da17198d625bbe1",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1720,
        "y": 2560,
        "wires": [
            [
                "adff5097bec1a702"
            ]
        ]
    },
    {
        "id": "adff5097bec1a702",
        "type": "IND CPU Temp",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "stack": "0",
        "payload": "payload",
        "payloadType": "msg",
        "x": 1940,
        "y": 2560,
        "wires": [
            [
                "dfa2af3c086a0f34"
            ]
        ]
    },
    {
        "id": "dfa2af3c086a0f34",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2180,
        "y": 2560,
        "wires": []
    },
    {
        "id": "cfe9eb4de5073cb2",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "ambient_temperature",
        "func": "msg.payload = msg.payload\nmsg.topic = 'ambient_temperature'  \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1180,
        "wires": [
            [
                "d10958c594703afb"
            ]
        ]
    },
    {
        "id": "73d84eb40c742deb",
        "type": "switch",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "property": "payload.switch_state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "heating",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "off",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "cooling",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2570,
        "y": 1180,
        "wires": [
            [
                "de17806f6f6e450c"
            ],
            [
                "c1d7fd5e8952ab2c"
            ],
            [
                "be7fb1feaf2683cd"
            ]
        ]
    },
    {
        "id": "de17806f6f6e450c",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.switch_state",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2790,
        "y": 1100,
        "wires": [
            [
                "2375f86655bd9a28"
            ]
        ]
    },
    {
        "id": "c1d7fd5e8952ab2c",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.switch_state",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2790,
        "y": 1180,
        "wires": [
            [
                "dd1d26385e27d22f"
            ]
        ]
    },
    {
        "id": "be7fb1feaf2683cd",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.switch_state",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2790,
        "y": 1260,
        "wires": [
            [
                "2856d936cb481147"
            ]
        ]
    },
    {
        "id": "12763b38f723d466",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "hvac_state",
        "payload": "off",
        "payloadType": "str",
        "x": 2030,
        "y": 1260,
        "wires": [
            [
                "d10958c594703afb"
            ]
        ]
    },
    {
        "id": "56cfd1a80429c8ea",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "hvac_state \"heating\"",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "hvac_state",
        "payload": "heating",
        "payloadType": "str",
        "x": 2030,
        "y": 1300,
        "wires": [
            [
                "d10958c594703afb"
            ]
        ]
    },
    {
        "id": "88c227b3a9f150f1",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "hvac_state \"cooling\"",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "hvac_state",
        "payload": "cooling",
        "payloadType": "str",
        "x": 2030,
        "y": 1340,
        "wires": [
            [
                "d10958c594703afb"
            ]
        ]
    },
    {
        "id": "d48df7f169a35864",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "away",
        "payload": "true",
        "payloadType": "str",
        "x": 2060,
        "y": 1390,
        "wires": [
            [
                "d10958c594703afb"
            ]
        ]
    },
    {
        "id": "7d8b411e613e8b76",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "away",
        "payload": "false",
        "payloadType": "str",
        "x": 2060,
        "y": 1430,
        "wires": [
            [
                "d10958c594703afb"
            ]
        ]
    },
    {
        "id": "d10958c594703afb",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "Data",
        "func": "\nif (msg.topic == \"mode\") {\n    global.set(\"ghostThermostat.mode\", msg.payload);\n}\nif (msg.topic == \"ambient_temperature\") {\n    global.set(\"ghostThermostat.ambient_temperature\", msg.payload);\n}\nif (msg.topic == \"target_temperature\") {\n    global.set(\"ghostThermostat.target_temperature\", msg.payload);\n}\nif (msg.topic == \"hvac_state\") {\n    global.set(\"ghostThermostat.hvac_state\", msg.payload);\n}\nif (msg.topic == \"away\") {\n    global.set(\"ghostThermostat.away\", msg.payload);\n}\nmsg.topic = \"update\";\nvar data = {\n    'ambient_temperature': global.get('ghostThermostat.ambient_temperature') || 72,\n    'target_temperature': global.get('ghostThermostat.target_temperature') || 72,\n    'hvac_state': global.get('ghostThermostat.hvac,state') || 'off',\n    'away': global.get('ghostThermostat.away') || 'false',\n    'mode': global.get('ghostThermostat.mode') || 'off'\n}\nmsg.payload = data;\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 1180,
        "wires": [
            [
                "d9983047dddb8ace",
                "3905720a1ede5f27"
            ]
        ]
    },
    {
        "id": "e76642ae2bb89ed9",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ghostThermostat",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2425,
        "y": 1140,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "c4905a53f8006301",
        "type": "ui_ui_control",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "events": "all",
        "x": 2160,
        "y": 1120,
        "wires": [
            [
                "d9983047dddb8ace"
            ]
        ]
    },
    {
        "id": "d9983047dddb8ace",
        "type": "ui_template",
        "z": "ba1efa06ea05afc6",
        "group": "9c90a075584ede2b",
        "name": "GhostThermostat",
        "order": 18,
        "width": 8,
        "height": 9,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');\n\n    svg {\n        transition: all .6s cubic-bezier(0.175, 0.885, 0.32, 1.2);\n    }\n\n    stop {\n        transition: all .5s;\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .led {\n        -webkit-transition: all 0.5s;\n        transition: all 0.5s;\n        fill: url({{'#GhostThermostat' + $id + 'ledColor'}});\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .fa-text {\n        font-family: FontAwesome !important;\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .dial {\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .qGradient {\n        fill : url({{'#GhostThermostat' + $id + 'qGradient'}});\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .qGradientT {\n        fill : url({{'#GhostThermostat' + $id + 'qGradientT'}});\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .eGradient {\n        fill : url({{'#GhostThermostat' + $id + 'eGradient'}});\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .lbl {\n        font-family: 'Roboto', sans-serif;\n        text-anchor: middle;\n        fill: #ffffff;\n        clip-path: url({{'#GhostThermostat' + $id + 'qClip'}});\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .lblDial {\n        fill: #dddddd;\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .lblAmbient {\n        font-weight: 400;\n        clip-path: url({{'#GhostThermostat' + $id + 'qClip'}});\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .lblAmbient tspan {\n        font-weight: 400;\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .lblTarget {\n        font-weight: 400;\n        fill: orange;\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .lblTarget tspan {\n        font-weight: 400;\n        fill: orange;\n        clip-path: url({{'#GhostThermostat' + $id + 'qClip'}});\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .nodisplay {\n        display: none !important;\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .icon {\n        font-family: FontAwesome !important;\n    }\n\n        {\n            {\n            '#GhostThermostat'+$id\n        }\n    }\n\n    .animate {\n        transition: all 0.5s;\n    }\n</style>\n<div id=\"{{'GhostThermostat' + $id}}\"></div>\n<script>\n    var mousedownID = -1;\nvar ghostThermostatDial = (function() {\n    console.log(\"START\");\n\n    function createSVGElement(tag, attributes, appendTo) {\n        var element = document.createElementNS('http://www.w3.org/2000/svg', tag);\n        attr(element, attributes);\n        if (appendTo) {\n            appendTo.appendChild(element);\n        }\n        return element;\n    }\n\n    function attr(element, attrs) {\n        for (var i in attrs) {\n            element.setAttribute(i, attrs[i]);\n        }\n    }\n\n    function setClass(el, className, state) {\n        el.classList[state ? 'add' : 'remove'](className);\n    }\n\n    return function(targetElement, options) {\n        console.log(\"RET FUN\");\n        var self = this;\n\n        /*\n         * Options\n         */\n        options = options || {};\n        options = {\n            diameter: options.diameter || 400,\n            mintemp: options.mintemp || 50, // Minimum value for target temperature\n            maxtemp: options.maxtemp || 105, // Maximum value for target temperature\n            ledColors: {\n                'off': 'rgb(143,141,141)',\n                'heating': 'rgb(255,128,0)',\n                'cooling': 'rgb(81,170,214)'\n            }, //Led Ring Colors\n            labels: {\n                ambient: \"ElementMua1\",\n                set: \"SET\",\n                mode: \"MODE\",\n                minus: \"-\",\n                plus: \"+\",\n                left: \"<\",\n                right: \">\"\n            },\n            onChangeState: options.onChangeState || function() {} // Function called when  switch state change\n        };\n\n        /*\n         * Properties\n         */\n        var properties = {\n            radius: options.diameter / 2,\n            modes: [{\n                    label: \"heating\",\n                    icon: \"\\uf06d\",\n                    color: \"orange\"\n                }, {\n                    label: 'cooling',\n                    icon: \"\\uf2dc\",\n                    color: \"rgb(0,168,168)\"\n                }, {\n                    label: \"off\",\n                    icon: \"\\uf06c\",\n                    color: \"rgb(0,128,128)\"\n                }\n                /*, {\n\t\t\t\tlabel: 'away',\n\t\t\t\ticon: \"\\uf06c\",\n\t\t\t\tcolor: \"gray\"\n\t\t\t} */\n            ],\n            modeNames: [\"heating\", \"cooling\", \"off\"],\n            swtitchStates: [\"heating\", \"cooling\", \"off\"]\n        };\n\n        /*\n         * Object state\n         */\n        var state = {\n            target_temperature: options.mintemp,\n            ambient_temperature: options.maxtemp,\n            mode: properties.modes.indexOf(properties.modes[0]),\n            switch_state: 'off',\n            away: false\n        };\n\n        /*\n         * Property getter / setters\n         */\n        Object.defineProperty(this, 'target_temperature', {\n            get: function() {\n                return state.target_temperature;\n            },\n            set: function(val) {\n                state.target_temperature = rangedTemperature(+val);\n                //render()\n            }\n        });\n\n        Object.defineProperty(this, 'ambient_temperature', {\n            get: function() {\n                return state.ambient_temperature;\n            },\n            set: function(val) {\n                state.ambient_temperature = +val;\n                render();\n            }\n        });\n\n        Object.defineProperty(this, 'mode_name', {\n            get: function() {\n                return properties.modeNames[state.mode];\n            },\n            set: function(val) {\n                if (properties.modeNames.indexOf(val) >= 0) {\n                    state.mode = properties.modeNames.indexOf(val);\n                    //render();\n                }\n            }\n        });\n\n        Object.defineProperty(this, 'switch_state', {\n            get: function() {\n                return state.switch_state;\n            },\n            set: function(val) {\n                if (properties.swtitchStates.indexOf(val) >= 0) {\n                    state.switch_state = val;\n                    //render();\n                }\n            }\n        });\n\n\n        function str2bool(strvalue) {\n            return (strvalue && typeof strvalue == 'string') ? (strvalue.toLowerCase() == 'true') : (strvalue == true);\n        }\n\n        Object.defineProperty(this, 'away', {\n            get: function() {\n                return state.away;\n            },\n            set: function(val) {\n                state.away = !!str2bool(val);\n                //render();\n            }\n        });\n\n\n        /*\n         * SVG\n         */\n        var svg = createSVGElement('svg', {\n            width: '100%', //options.diameter+'px',\n            height: '100%', //options.diameter+'px',\n            viewBox: '0 0 ' + options.diameter + ' ' + options.diameter,\n            class: 'dial'\n        }, targetElement);\n\n        // DEFS \n        var defs = createSVGElement('defs', null, svg);\n\n        var qgradient = createSVGElement('linearGradient', {\n            'id': targetElement.getAttribute('id') + 'qGradient',\n            gradientTransform: 'rotate(65)'\n        }, defs);\n        var stop = createSVGElement('stop', {\n            'offset': '50%',\n            'stop-color': 'rgb(86,89,94)'\n        }, qgradient);\n        var stop = createSVGElement('stop', {\n            'offset': '65%',\n            'stop-color': 'rgb(30,30,30)'\n        }, qgradient);\n\n        var qGradientT = createSVGElement('linearGradient', {\n            'id': targetElement.getAttribute('id') + 'qGradientT',\n            gradientTransform: 'rotate(65)'\n        }, defs);\n        var stop = createSVGElement('stop', {\n            'offset': '55%',\n            'stop-color': '#3b3e43',\n            'stop-opacity': '1'\n        }, qGradientT);\n        var stop = createSVGElement('stop', {\n            'offset': '90%',\n            'stop-color': 'rgb(0,0,0)',\n            'stop-opacity': '1'\n        }, qGradientT);\n\n        var clipPath = createSVGElement('clipPath', {\n            'id': targetElement.getAttribute('id') + 'qClip',\n        }, defs);\n        var circle = createSVGElement('circle', {\n            cx: properties.radius,\n            cy: properties.radius,\n            r: properties.radius - 25\n        }, clipPath);\n\n\n        var ledRingGradient = createSVGElement('radialGradient', {\n            'id': targetElement.getAttribute('id') + 'ledColor',\n            'cx': \"50%\",\n            'cy': \"50%\",\n            'r': \"95%\",\n            'fx': \"50%\",\n            'fy': \"50%\"\n        }, defs);\n        var ledRingGradientColorIn = createSVGElement('stop', {\n            'offset': '45%',\n            'stop-color': 'rgb(255,0,130)',\n            'stop-opacity': '1'\n        }, ledRingGradient);\n        var ledRingGradientColorOut = createSVGElement('stop', {\n            'offset': '65%',\n            'stop-color': 'rgb(0,0,0)',\n            'stop-opacity': '1'\n        }, ledRingGradient);\n\n        var egradient = createSVGElement('linearGradient', {\n            'id': targetElement.getAttribute('id') + 'eGradient',\n            gradientTransform: 'rotate(55)'\n        }, defs);\n        var stop = createSVGElement('stop', {\n            'offset': '55%',\n            'stop-color': '#888888',\n            'stop-opacity': '1'\n        }, egradient);\n        var stop = createSVGElement('stop', {\n            'offset': '95%',\n            'stop-color': '#333333',\n            'stop-opacity': '1'\n        }, egradient);\n\n        // DIAL\n        var circle = createSVGElement('circle', {\n            cx: properties.radius,\n            cy: properties.radius,\n            r: properties.radius,\n            class: 'eGradient'\n        }, svg);\n        var ledRing = createSVGElement('circle', {\n            cx: properties.radius,\n            cy: properties.radius,\n            r: properties.radius - 3,\n            'stroke': 'black',\n            'stroke-width': '1',\n            class: 'led'\n        }, svg);\n        var circle = createSVGElement('circle', {\n            cx: properties.radius,\n            cy: properties.radius,\n            r: properties.radius - 20,\n            class: 'qGradient'\n        }, svg);\n        var circle = createSVGElement('circle', {\n            cx: properties.radius,\n            cy: properties.radius,\n            r: properties.radius - 25,\n            class: 'qGradient'\n        }, svg);\n        var lblMain = createSVGElement('text', {\n            x: properties.radius,\n            y: 70,\n            class: 'lbl lblDial'\n        }, svg);\n        var lblMainText = document.createTextNode(options.labels.ambient);\n        lblMain.appendChild(lblMainText);\n\n        var lblAmbient = createSVGElement('text', {\n            x: properties.radius,\n            y: 210,\n            'font-size': '160',\n            class: 'lbl lblAmbient'\n        }, svg);\n        var lblAmbientText = document.createTextNode('21');\n        lblAmbient.appendChild(lblAmbientText);\n        var lblAmbientDec = createSVGElement('tspan', {\n            'font-size': '60',\n        }, lblAmbient);\n        var lblAmbientDecText = document.createTextNode('.5');\n        lblAmbientDec.appendChild(lblAmbientDecText);\n\n        var line = createSVGElement('line', {\n            x1: 55,\n            y1: properties.radius + 35,\n            x2: options.diameter - 55,\n            y2: properties.radius + 35,\n            'stroke': '#DDDDDD',\n            'stroke-width': '1',\n            'opacity': '0.8'\n        }, svg);\n\n        var lblLeft = createSVGElement('text', {\n            x: 125,\n            y: properties.radius + 75,\n            class: 'lbl lblDial'\n        }, svg);\n        var lblLeftText = document.createTextNode(options.labels.set);\n        lblLeft.appendChild(lblLeftText);\n\n        var lblTarget = createSVGElement('text', {\n            x: 125,\n            y: properties.radius + 115,\n            'font-size': '35',\n            class: 'lbl lblTarget',\n            'id': targetElement.getAttribute('id') + 'lblTarget'\n        }, svg);\n        var lblTargetText = document.createTextNode('20');\n        lblTarget.appendChild(lblTargetText);\n\n        var lblTargetDec = createSVGElement('tspan', {\n            'font-size': '20',\n        }, lblTarget);\n\n        var lblTargetDecText = document.createTextNode('.5');\n        lblTargetDec.appendChild(lblTargetDecText);\n\n        var lblRight = createSVGElement('text', {\n            x: options.diameter - 125,\n            y: properties.radius + 75,\n            class: 'lbl lblDial'\n        }, svg);\n        var lblRightText = document.createTextNode(options.labels.mode);\n        lblRight.appendChild(lblRightText);\n\n        var lblMode = createSVGElement('text', {\n            x: options.diameter - 125,\n            y: properties.radius + 115,\n            'font-size': '35',\n            class: 'lbl lblTarget icon',\n            'id' : targetElement.getAttribute('id') + 'lblMode'\n        }, svg);\n        var lblModeText = document.createTextNode(properties.modes[0].icon);\n        lblMode.appendChild(lblModeText);\n\n        var btnSet = createSVGElement('g', {\n            transform: 'translate(200,200)'\n        }, svg);\n        var btnLeft = createSVGElement('path', {\n            d: 'M0,40 L0,175   A175,175 0 0,1 -175,40    z',\n            fill: 'blue',\n            opacity: '0',\n            'id': targetElement.getAttribute('id') + 'btnLeft'\n        }, btnSet);\n        var btnRight = createSVGElement('path', {\n            d: 'M0,40 L175,40   A175,175 0 0,1    0,175  z',\n            fill: 'red',\n            opacity: '0',\n            'id': targetElement.getAttribute('id') + 'btnRight'\n        }, btnSet);\n\n\n\n        btnLeft.onclick = function() {\n            setTargetClick();\n        };\n\n        btnRight.onclick = function() {\n            setModeClick();\n        };\n\n        var targetPanel = false;\n        var modePanel = false;\n\n        var lblAmbientAttributes = {\n            x: lblAmbient.getAttribute('x'),\n            y: lblAmbient.getAttribute('y'),\n            size: lblAmbient.getAttribute('font-size')\n        };\n\n        var lblAmbientDecAttributes = {\n            x: lblAmbientDec.getAttribute('x'),\n            y: lblAmbientDec.getAttribute('y'),\n            size: lblAmbientDec.getAttribute('font-size')\n        };\n\n        var lblTargetAttributes = {\n            x: lblTarget.getAttribute('x'),\n            y: lblTarget.getAttribute('y'),\n            size: lblTarget.getAttribute('font-size')\n        };\n\n        var lblTargetDecAttributes = {\n            x: lblTargetDec.getAttribute('x'),\n            y: lblTargetDec.getAttribute('y'),\n            size: lblTargetDec.getAttribute('font-size')\n        };\n\n        var lblModeAttributes = {\n            x: lblMode.getAttribute('x'),\n            y: lblMode.getAttribute('y'),\n            size: lblMode.getAttribute('font-size')\n        };\n\n        var lblRightAttributes = {\n            x: lblRight.getAttribute('x'),\n            y: lblRight.getAttribute('y'),\n            size: lblRight.getAttribute('font-size')\n        };\n\n        var lblLeftAttributes = {\n            x: lblLeft.getAttribute('x'),\n            y: lblLeft.getAttribute('y'),\n            size: lblLeft.getAttribute('font-size')\n        };\n\n        render();\n\n        function setAmbientTemperature(ambientTemp) {\n            var splitValues = separateDecValue(ambientTemp);\n            lblAmbientText.textContent = splitValues.int;\n            lblAmbientDecText.textContent = splitValues.dec;\n        };\n\n\n        function calcTargetTemperature(operation) {\n            let currentTemp = Number(parseFloat(lblTargetText.textContent + lblTargetDecText.textContent)).toFixed(1);\n            let targetTemp = (operation == '-' ? Number(Number(currentTemp) - 0.5).toFixed(1) : Number(Number(currentTemp) + 0.5).toFixed(1));\n            targetTemp = rangedTemperature(targetTemp);\n            setTargetTemperature(targetTemp);\n            chkSwitchState();\n        };\n\n        function setTargetTemperature(targetTemp) {\n            var splitValues = separateDecValue(targetTemp);\n            lblTargetText.textContent = splitValues.int;\n            lblTargetDecText.textContent = splitValues.dec;\n            if (state.target_temperature != targetTemp) {\n                state.target_temperature = targetTemp\n                sendMsg();\n            };\n        };\n\n        function separateDecValue(floatFalue) {\n            var int = Math.floor(floatFalue);\n            var dec = Math.floor(((floatFalue % 1) * 10)) > 0 ? (\".\" + Math.floor(((floatFalue % 1) * 10))) : \"\";\n            return {\n                int,\n                dec\n            };\n        };\n\n        function rangedTemperature(temperature) {\n            temperature = temperature < options.mintemp ? options.maxtemp : temperature;\n            temperature = temperature > options.maxtemp ? options.mintemp : temperature;\n            return temperature;\n        };\n\n        function chkSwitchState() {\n            console.log(\"chkSwitchState\");\n            var switchState = state.switch_state;\n            switch (state.mode) {\n                case 0:\n                    switchState = state.ambient_temperature < state.target_temperature ? 'heating' : 'off';\n                    break;\n                case 1:\n                    switchState = state.ambient_temperature > state.target_temperature ? 'cooling' : 'off';\n                    break;\n                default:\n                    switchState = 'off';\n            };\n\n            ledRingGradientColorIn.setAttribute('stop-color', options.ledColors[state.switch_state]);\n\n            if (state.switch_state != switchState) {\n                state.switch_state = switchState;\n                sendMsg();\n            };\n        };\n\n\n        function resetButton() {\n            btnLeft.onmousedown = \"\";\n            btnLeft.onmouseup = \"\";\n            btnLeft.onclick = function() {\n                setTargetClick();\n            };\n            btnRight.onmousedown = \"\";\n            btnRight.onmouseup = \"\";\n            btnRight.onclick = function() {\n                setModeClick();\n            };\n        };\n\n        function switchMainView(element, originalAttributes, mainLabel, leftLabel, rightLabel, panelState) {\n            setClass(lblAmbient, \"nodisplay\", panelState);\n            setClass(lblMain, \"animate\", panelState);\n            setClass(lblLeft, \"animate\", panelState);\n            setClass(lblRight, \"animate\", panelState);\n            setClass(element, \"animate\", panelState);\n\n            lblMainText.textContent = panelState ? mainLabel : options.labels.ambient;\n            lblLeftText.textContent = panelState ? leftLabel : options.labels.set;\n\n            lblLeft.setAttribute('y', panelState ? Number(lblLeftAttributes.y) + 40 : lblLeftAttributes.y);\n            lblLeft.setAttribute('font-size', panelState ? \"3.5em\" : \"1em\");\n\n            lblRightText.textContent = panelState ? rightLabel : options.labels.mode;\n            lblRight.setAttribute('y', panelState ? Number(lblRightAttributes.y) + 40 : lblRightAttributes.y);\n            lblRight.setAttribute('font-size', panelState ? \"3.5em\" : \"1em\");\n\n            element.setAttribute('x', panelState ? lblAmbientAttributes.x : originalAttributes.x);\n            element.setAttribute('x', panelState ? lblAmbientAttributes.x : originalAttributes.x);\n            element.setAttribute('y', panelState ? lblAmbientAttributes.y : originalAttributes.y);\n            element.setAttribute('font-size', panelState ? lblAmbientAttributes.size : originalAttributes.size);\n\n        };\n\n\n        function setTargetClick() {\n\n            targetPanel = targetPanel ? false : true;\n            setClass(lblMode, \"nodisplay\", targetPanel);\n            switchMainView(lblTarget, lblTargetAttributes, options.labels.set, options.labels.minus, options.labels.plus, targetPanel);\n\n            lblTargetDec.setAttribute('font-size', targetPanel ? lblAmbientDecAttributes.size : lblTargetDecAttributes.size);\n\n            if (targetPanel) {\n                btnLeft.onclick = \"\";\n                btnRight.onclick = \"\";\n\n                btnLeft.onmousedown = function() {\n                    calcTargetTemperature(\"-\");\n                    if (mousedownID == -1) { //Prevent multimple loops!\n                        mousedownID = setInterval(calcTargetTemperature, 500, '-');\n                    }\n                };\n                btnLeft.onmouseup = function() {\n                    if (mousedownID != -1) { //Only stop if exists\n                        clearInterval(mousedownID);\n                        mousedownID = -1;\n                    }\n                };\n\n                btnRight.onmousedown = function() {\n                    calcTargetTemperature(\"+\");\n                    if (mousedownID == -1) { //Prevent multimple loops!\n                        mousedownID = setInterval(calcTargetTemperature, 500, '+');\n                    }\n                };\n                btnRight.onmouseup = function() {\n                    if (mousedownID != -1) { //Only stop if exists\n                        clearInterval(mousedownID);\n                        mousedownID = -1;\n                    }\n                };\n\n                lblTarget.onclick = function() {\n                    setTargetClick();\n                };\n            } else {\n                resetButton()\n            }\n        };\n\n        function setModeClick() {\n\n            modePanel = modePanel ? false : true;\n            setClass(lblTarget, \"nodisplay\", modePanel);\n            switchMainView(lblMode, lblModeAttributes, options.labels.mode, options.labels.left, options.labels.right, modePanel);\n\n            if (modePanel) {\n\n                btnLeft.onclick = function() {\n                    mode = state.mode;\n                    mode = --mode < 0 ? properties.modes.length - 1 : mode;\n                    console.log(\"MODE :\" + mode);\n                    setModeName(properties.modeNames[mode]);\n                    chkSwitchState();\n                    sendMsg();\n                };\n\n                btnRight.onclick = function() {\n                    mode = state.mode;\n                    mode = ++mode > properties.modes.length - 1 ? 0 : mode;\n                    console.log(\"MODE :\" + mode);\n                    setModeName(properties.modeNames[mode]);\n                    chkSwitchState();\n                    sendMsg();\n                };\n//                document.getElementById(targetElement.getAttribute('id') + \"lblMode\").onclick = function() {\n                lblMode.onclick = function() {\n                    setModeClick();\n                };\n            } else {\n                resetButton()\n            }\n        };\n\n        function setModeName(modeName) {\n            lblMode.textContent = properties.modes[properties.modeNames.indexOf(modeName)].icon;\n            lblMode.style.fill = properties.modes[properties.modeNames.indexOf(modeName)].color;\n            state.mode = properties.modeNames.indexOf(modeName);\n        };\n\n        function sendMsg() {\n            if (typeof options.onChangeState == 'function') {\n                options.onChangeState(state.switch_state);\n            }\n        };\n\n        function render() {\n            console.log(\"RENDER\");\n            setAmbientTemperature(self.ambient_temperature);\n            setTargetTemperature(self.target_temperature);\n            setModeName(self.mode_name);\n            chkSwitchState();\n        };\n\n    };\n})();\n\nvar initializing = false;\n(function(scope) {\n    console.log(\"scope.id = GhostThermostat\" + scope.$id);\n    $(function() {\n        var ghostThermostat = new ghostThermostatDial(document.getElementById('GhostThermostat' + scope.$id), {\n            onChangeState: function() {\n                var p = {\n                    \"ambient_temperature\": ghostThermostat.ambient_temperature,\n                    \"target_temperature\": ghostThermostat.target_temperature,\n                    \"mode\": ghostThermostat.mode_name,\n                    \"switch_state\": ghostThermostat.switch_state,\n                    \"away\": ghostThermostat.away\n                };\n                scope.send({\n                    topic: \"changed_state\",\n                    payload: p\n                });\n            }\n        });\n\n\n        scope.$watch('msg', function(data) {\n            if (initializing) {\n                initializing = false;\n            } else {\n                ghostThermostat.ambient_temperature = data.payload.ambient_temperature || ghostThermostat.ambient_temperature;\n                ghostThermostat.target_temperature = data.payload.target_temperature || ghostThermostat.target_temperature;\n                ghostThermostat.mode_name = data.payload.mode || ghostThermostat.mode_name;\n                ghostThermostat.switch_state = data.payload.switch_state || ghostThermostat.switch_state;\n                ghostThermostat.away = data.payload.away || ghostThermostat.away;\n            }\n        });\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2330,
        "y": 1180,
        "wires": [
            [
                "e76642ae2bb89ed9",
                "73d84eb40c742deb",
                "a185ad505cbfdc99",
                "e256b5ce9ec2c64f",
                "5e5db8ac5becc190"
            ]
        ],
        "icon": "font-awesome/fa-tachometer"
    },
    {
        "id": "2375f86655bd9a28",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3060,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "dd1d26385e27d22f",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3060,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "fe7e8e3abd8633b1",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1115,
        "y": 1700,
        "wires": [
            [
                "7c0c1a4a8a3ef2dc",
                "3b78401b6607fdad"
            ]
        ],
        "l": false
    },
    {
        "id": "767b50be6f94388e",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "Outdoor Conditions Flow",
        "info": "",
        "x": 1175,
        "y": 1620,
        "wires": [],
        "l": false
    },
    {
        "id": "36fe3268e631f2a9",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.humidity",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1515,
        "y": 1860,
        "wires": [
            [
                "5b3c5af2ca03bbd9"
            ]
        ],
        "l": false
    },
    {
        "id": "6369de69a52f2586",
        "type": "ui_gauge",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "group": "9c90a075584ede2b",
        "order": 31,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Outdoor Humidity %",
        "label": "%",
        "format": "{{value}}",
        "min": "-40",
        "max": "120",
        "colors": [
            "#008080",
            "#00a0a0",
            "#00c8c8"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2195,
        "y": 1860,
        "wires": [],
        "l": false
    },
    {
        "id": "1f1442278de8859f",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.windspeed",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1515,
        "y": 1960,
        "wires": [
            [
                "54c6944e5a21189e"
            ]
        ],
        "l": false
    },
    {
        "id": "23e1f847dc138f84",
        "type": "ui_gauge",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "group": "9c90a075584ede2b",
        "order": 30,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Outdoor Windspeed",
        "label": "mph",
        "format": "{{value}}",
        "min": "-40",
        "max": "120",
        "colors": [
            "#008080",
            "#00a0a0",
            "#00c8c8"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2195,
        "y": 1960,
        "wires": [],
        "l": false
    },
    {
        "id": "44a7653ff483dbb5",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "Tstat",
        "info": "",
        "x": 2310,
        "y": 1120,
        "wires": []
    },
    {
        "id": "5ee541ddd8ddea8a",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "Heating/OFF/Cooling Switches",
        "info": "",
        "x": 2810,
        "y": 1040,
        "wires": []
    },
    {
        "id": "1c64ffad81b61da9",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.tempc",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1515,
        "y": 1760,
        "wires": [
            [
                "3a5dba2ed103f412"
            ]
        ],
        "l": false
    },
    {
        "id": "3a5dba2ed103f412",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "Temp Conversion",
        "func": "// Function to convert Celsius to Fahrenheit\nfunction celsiusToFahrenheit(celsius) {\n    return ((celsius * 9) / 5 + 32).toFixed(2);\n}\n\n// Extract temperature value from the incoming message\nvar temperatureCelsius = msg.payload;\n\n// Add a +3 offset to the temperature\ntemperatureCelsius += 0;\n\n// Convert the adjusted temperature to Fahrenheit\nvar temperatureFahrenheit = celsiusToFahrenheit(temperatureCelsius);\n\n// Create a new message with the converted temperature\nmsg.payload = temperatureFahrenheit;\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1695,
        "y": 1760,
        "wires": [
            [
                "40ec3109cde81794",
                "80492882448d2e29"
            ]
        ],
        "l": false
    },
    {
        "id": "9c82fbf70395c98b",
        "type": "ui_gauge",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "group": "9c90a075584ede2b",
        "order": 28,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Outdoor Air Temp",
        "label": "*F",
        "format": "{{value}}",
        "min": "-40",
        "max": "120",
        "colors": [
            "#008080",
            "#00a0a0",
            "#00c8c8"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2195,
        "y": 1760,
        "wires": [],
        "l": false
    },
    {
        "id": "5f79521ba7419e93",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "Save to Global",
        "rules": [
            {
                "t": "set",
                "p": "OutdoorAirTemp",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2015,
        "y": 1760,
        "wires": [
            [
                "9c82fbf70395c98b"
            ]
        ],
        "l": false
    },
    {
        "id": "1410593d3b21b20c",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "Save to Global",
        "rules": [
            {
                "t": "set",
                "p": "OutdoorHumidity",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1955,
        "y": 1860,
        "wires": [
            [
                "6369de69a52f2586"
            ]
        ],
        "l": false
    },
    {
        "id": "2058c42c3afbf20b",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "Save to Global",
        "rules": [
            {
                "t": "set",
                "p": "OutdoorWindSpeed",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1955,
        "y": 1960,
        "wires": [
            [
                "23e1f847dc138f84"
            ]
        ],
        "l": false
    },
    {
        "id": "88bc365390fdf6aa",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.ambient_temperature",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "DischargeAir",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2375,
        "y": 1220,
        "wires": [
            [
                "0458ae9f69730998"
            ]
        ],
        "l": false
    },
    {
        "id": "3905720a1ede5f27",
        "type": "json",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 2315,
        "y": 1220,
        "wires": [
            [
                "88bc365390fdf6aa"
            ]
        ],
        "l": false
    },
    {
        "id": "0458ae9f69730998",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "Save Ambient to Global",
        "rules": [
            {
                "t": "set",
                "p": "ElementMua1",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2435,
        "y": 1220,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "a89573204b23ac7f",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.target_temperature",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "TargetTemperature",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2375,
        "y": 1280,
        "wires": [
            [
                "d2746b0e9f13c96e"
            ]
        ],
        "l": false
    },
    {
        "id": "a185ad505cbfdc99",
        "type": "json",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 2315,
        "y": 1280,
        "wires": [
            [
                "a89573204b23ac7f"
            ]
        ],
        "l": false
    },
    {
        "id": "d2746b0e9f13c96e",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "Save Target Temp to Global",
        "rules": [
            {
                "t": "set",
                "p": "TargetTemp",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2435,
        "y": 1280,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "936f33c823c30972",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.switch_state",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "HvacState",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2375,
        "y": 1340,
        "wires": [
            [
                "86d4a2c60c11aac3"
            ]
        ],
        "l": false
    },
    {
        "id": "e256b5ce9ec2c64f",
        "type": "json",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 2315,
        "y": 1340,
        "wires": [
            [
                "936f33c823c30972"
            ]
        ],
        "l": false
    },
    {
        "id": "86d4a2c60c11aac3",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "Save Hvac State to Global",
        "rules": [
            {
                "t": "set",
                "p": "HvacState",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2435,
        "y": 1340,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "64eacf4dedc4c949",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "Data to Send To InfluxDb",
        "info": "",
        "x": 2510,
        "y": 1300,
        "wires": []
    },
    {
        "id": "7446d759dda31908",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.mode",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "ActiveSwitchState",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2375,
        "y": 1400,
        "wires": [
            [
                "f51f89180cb88a27"
            ]
        ],
        "l": false
    },
    {
        "id": "5e5db8ac5becc190",
        "type": "json",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 2315,
        "y": 1400,
        "wires": [
            [
                "7446d759dda31908"
            ]
        ],
        "l": false
    },
    {
        "id": "f51f89180cb88a27",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "Save Hvac State to Global",
        "rules": [
            {
                "t": "set",
                "p": "ActiveSwitchState",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2435,
        "y": 1400,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "54c6944e5a21189e",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "Round to 2 Decimals",
        "func": "msg.payload.windspeed = parseFloat(msg.payload.humidity).toFixed(2);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1715,
        "y": 1960,
        "wires": [
            [
                "2058c42c3afbf20b"
            ]
        ],
        "l": false
    },
    {
        "id": "5b3c5af2ca03bbd9",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "Round to 2 Decimals",
        "func": "msg.payload.humidity = parseFloat(msg.payload.humidity).toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1735,
        "y": 1860,
        "wires": [
            [
                "1410593d3b21b20c"
            ]
        ],
        "l": false
    },
    {
        "id": "40ec3109cde81794",
        "type": "json",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 1895,
        "y": 1760,
        "wires": [
            [
                "5f79521ba7419e93"
            ]
        ],
        "l": false
    },
    {
        "id": "d417bb998972a964",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2015,
        "y": 1720,
        "wires": [
            [
                "9c82fbf70395c98b"
            ]
        ],
        "l": false
    },
    {
        "id": "4e8bead4ac61dbd4",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2055,
        "y": 1820,
        "wires": [
            [
                "6369de69a52f2586"
            ]
        ],
        "l": false
    },
    {
        "id": "adee354c47bc7482",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2058.125,
        "y": 1914,
        "wires": [
            [
                "23e1f847dc138f84"
            ]
        ],
        "l": false
    },
    {
        "id": "8a2d9d13d8b4b674",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "Save  RpiCoreTemp to Global",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "global",
                "to": "RpiCoreTemp",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1915,
        "y": 2260,
        "wires": [
            [
                "b051c0a08a83562d"
            ]
        ],
        "l": false
    },
    {
        "id": "59aa51f982d0b285",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "Save RpiCpuUsage to Global",
        "rules": [
            {
                "t": "set",
                "p": "overall",
                "pt": "global",
                "to": "RpiCpu",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1915,
        "y": 2300,
        "wires": [
            [
                "b051c0a08a83562d"
            ]
        ],
        "l": false
    },
    {
        "id": "b051c0a08a83562d",
        "type": "ui_chart",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "group": "9c90a075584ede2b",
        "order": 61,
        "width": 19,
        "height": 5,
        "label": "Automata System Usage",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#00a8a8",
            "#fe8801",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2315,
        "y": 2280,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "41b7bed7c2c7cc46",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "Air Temp Limits & Alarms",
        "info": "",
        "x": 1975,
        "y": 1640,
        "wires": [],
        "l": false
    },
    {
        "id": "7c0c1a4a8a3ef2dc",
        "type": "openweathermap",
        "z": "ba1efa06ea05afc6",
        "name": "Element Weather",
        "wtype": "current",
        "lon": "-85.112637244",
        "lat": "41.0966",
        "city": "",
        "country": "",
        "language": "en",
        "x": 1295,
        "y": 1760,
        "wires": [
            [
                "36fe3268e631f2a9",
                "1f1442278de8859f",
                "1c64ffad81b61da9"
            ]
        ],
        "l": false
    },
    {
        "id": "bcd8dca5c6e980d0",
        "type": "ui_led",
        "z": "ba1efa06ea05afc6",
        "order": 56,
        "group": "9c90a075584ede2b",
        "width": 7,
        "height": 1,
        "label": "Discharge Temp Alarm Active",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#808080",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#ffa500",
                "value": "0",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": true,
        "shape": "circle",
        "showGlow": true,
        "name": "Air Temp Alarm Active",
        "x": 1600,
        "y": 140,
        "wires": []
    },
    {
        "id": "97e917cfc24b9c2b",
        "type": "ui_gauge",
        "z": "ba1efa06ea05afc6",
        "name": "Discharge AIr",
        "group": "9c90a075584ede2b",
        "order": 3,
        "width": 5,
        "height": 4,
        "gtype": "gage",
        "title": "Discharge AIr",
        "label": "*F",
        "format": "{{value}}",
        "min": 0,
        "max": "220",
        "colors": [
            "#008080",
            "#00a0a0",
            "#fa5700"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1660,
        "y": 960,
        "wires": []
    },
    {
        "id": "b279ca1492188151",
        "type": "ui_gauge",
        "z": "ba1efa06ea05afc6",
        "name": "IntakeAir",
        "group": "9c90a075584ede2b",
        "order": 4,
        "width": 5,
        "height": 4,
        "gtype": "gage",
        "title": "IntakeAir",
        "label": "*F",
        "format": "{{value}}",
        "min": "-20",
        "max": "105",
        "colors": [
            "#008080",
            "#00a0a0",
            "#b8ea06"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2075,
        "y": 1680,
        "wires": [],
        "l": false
    },
    {
        "id": "2d921eda34af3369",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "Save  SA to Global",
        "rules": [
            {
                "t": "set",
                "p": "DischargeAir",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1470,
        "y": 960,
        "wires": [
            [
                "97e917cfc24b9c2b"
            ]
        ]
    },
    {
        "id": "80492882448d2e29",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "Save  SA to Global",
        "rules": [
            {
                "t": "set",
                "p": "IntakeAir",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1835,
        "y": 1680,
        "wires": [
            [
                "b279ca1492188151"
            ]
        ],
        "l": false
    },
    {
        "id": "f940407295b2f390",
        "type": "ui_led",
        "z": "ba1efa06ea05afc6",
        "order": 47,
        "group": "9c90a075584ede2b",
        "width": 7,
        "height": 1,
        "label": "Cooling Logic Active",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#808080",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008080",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": true,
        "shape": "circle",
        "showGlow": true,
        "name": "Cooling Logic Active",
        "x": 3840,
        "y": 1620,
        "wires": []
    },
    {
        "id": "fe0417e7443edf8d",
        "type": "ui_led",
        "z": "ba1efa06ea05afc6",
        "order": 50,
        "group": "9c90a075584ede2b",
        "width": 7,
        "height": 1,
        "label": "Cooling Active",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#808080",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#ffa500",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": true,
        "shape": "circle",
        "showGlow": true,
        "name": "Cooling Active",
        "x": 4147.89111328125,
        "y": 1285.397216796875,
        "wires": []
    },
    {
        "id": "c99c194f55278eba",
        "type": "ui_led",
        "z": "ba1efa06ea05afc6",
        "order": 54,
        "group": "9c90a075584ede2b",
        "width": 7,
        "height": 1,
        "label": "Heating /Dehum Active",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#808080",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#ffa500",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": true,
        "shape": "circle",
        "showGlow": true,
        "name": "Heating/Dehum Active",
        "x": 4140,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d5c36873990d84ea",
        "type": "ui_led",
        "z": "ba1efa06ea05afc6",
        "order": 52,
        "group": "9c90a075584ede2b",
        "width": 7,
        "height": 1,
        "label": "Heating /Dehum Logic Active",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#808080",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#ffa500",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": true,
        "shape": "circle",
        "showGlow": true,
        "name": "Heating /Dehum Logic Active",
        "x": 4160,
        "y": 1180,
        "wires": []
    },
    {
        "id": "3b78401b6607fdad",
        "type": "cpu",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "msgCore": false,
        "msgOverall": true,
        "msgArray": false,
        "msgTemp": true,
        "x": 1295,
        "y": 2260,
        "wires": [
            [
                "8a2d9d13d8b4b674",
                "59aa51f982d0b285"
            ]
        ],
        "l": false
    },
    {
        "id": "2856d936cb481147",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3020,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "cefbd229b0ef15d9",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 3",
        "func": "// Retrieve DischargeAir and ReturnAir from global context\nvar dischargeAir = global.get('DischargeAir');\nvar returnAir = global.get('ReturnAir');\n\n// Check if DischargeAir is within the normal range\nif (dischargeAir >= 50 && dischargeAir <= 85) {\n    // Set msg.payload to \"AllClear\"\n    msg.payload = \"AllClear\";\n    // Update node status\n    node.status({ fill: \"green\", shape: \"dot\", text: \"DischargeAir: \" + dischargeAir + \" | ReturnAir: \" + returnAir });\n} else {\n    // Check if DischargeAir is below normal range\n    if (dischargeAir < 50) {\n        // Set msg.payload to \"LowDischargeAir\"\n        msg.payload = \"ALARM!LowDischargeAir\";\n        // Update node status\n        node.status({ fill: \"yellow\", shape: \"dot\", text: \"Low DischargeAir: \" + dischargeAir });\n    }\n    // Check if DischargeAir is above normal range\n    if (dischargeAir > 85) {\n        // Set msg.payload to \"HighDischargeAir\"\n        msg.payload = \"ALARM!HighDischargeAir\";\n        // Update node status\n        node.status({ fill: \"red\", shape: \"dot\", text: \"High DischargeAir: \" + dischargeAir });\n    }\n}\n\n// Check if ReturnAir is within the normal range\nif (returnAir >= 50 && returnAir <= 85) {\n    // Set msg.payload to \"AllClear\"\n    msg.payload = \"AllClear\";\n    // Update node status for ReturnAir\n    node.status({ fill: \"green\", shape: \"dot\", text: \"DischargeAir: \" + dischargeAir + \" | ReturnAir: \" + returnAir });\n} else {\n    // Check if ReturnAir is below normal range\n    if (returnAir < 50) {\n        // Set msg.payload to \"LowReturnAir\"\n        msg.payload = \"ALARM!LowReturnAir\";\n        // Update node status for ReturnAir\n        node.status({ fill: \"yellow\", shape: \"dot\", text: \"Low ReturnAir: \" + returnAir });\n    }\n    // Check if ReturnAir is above normal range\n    if (returnAir > 85) {\n        // Set msg.payload to \"HighReturnAir\"\n        msg.payload = \"ALARM!HighReturnAir\";\n        // Update node status for ReturnAir\n        node.status({ fill: \"red\", shape: \"dot\", text: \"High ReturnAir: \" + returnAir });\n    }\n}\n\n// Save alarm status to global context\nglobal.set('alarmStatus', msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 200,
        "wires": [
            [
                "3f8fa41996fb1c79",
                "be4ce72c7f3dbc94",
                "2c6374aab63ee89d"
            ]
        ]
    },
    {
        "id": "3f8fa41996fb1c79",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 69",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1180,
        "y": 140,
        "wires": []
    },
    {
        "id": "812a81a5d7c094f3",
        "type": "e-mail",
        "z": "ba1efa06ea05afc6",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "AutomataControls@gmail.com;Andrew.jewellsr@gmail.com",
        "dname": "",
        "x": 1620,
        "y": 200,
        "wires": []
    },
    {
        "id": "317b24e5f6434fb1",
        "type": "http request",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://worldtimeapi.org/api/timezone/America/Indiana/Indianapolis",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1370,
        "y": 440,
        "wires": [
            [
                "f696bc0d8a9511e3"
            ]
        ]
    },
    {
        "id": "f696bc0d8a9511e3",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 8",
        "func": "// Extract current time from the response\nvar currentTime = msg.payload.datetime;\n\n// Set the current time as msg.payload\nmsg.payload = currentTime;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 440,
        "wires": [
            [
                "5c8535e739f23be5",
                "aeb19f11494cc3b3"
            ]
        ]
    },
    {
        "id": "5c8535e739f23be5",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 71",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1620,
        "y": 380,
        "wires": []
    },
    {
        "id": "aeb19f11494cc3b3",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "CurrentTime",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1740,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "be4ce72c7f3dbc94",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 9",
        "func": "// Check if msg.payload contains 'alarm'\nif (msg.payload && msg.payload.includes('alarm')) {\n    // Pass the message through\n    return msg;\n} else {\n    // Drop the message\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 200,
        "wires": [
            [
                "812a81a5d7c094f3"
            ]
        ]
    },
    {
        "id": "2c6374aab63ee89d",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "alarm",
                "fromt": "str",
                "to": "0",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "AllClear",
                "fromt": "str",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1380,
        "y": 140,
        "wires": [
            [
                "bcd8dca5c6e980d0",
                "95a56123550c7d1d"
            ]
        ]
    },
    {
        "id": "95a56123550c7d1d",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 74",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1600,
        "y": 80,
        "wires": []
    },
    {
        "id": "d07ce346abe22eca",
        "type": "ui_led",
        "z": "ba1efa06ea05afc6",
        "order": 1,
        "group": "9c90a075584ede2b",
        "width": 9,
        "height": 1,
        "label": "Watchdog",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#808080",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": true,
        "shape": "circle",
        "showGlow": true,
        "name": "Watchdog",
        "x": 680,
        "y": 300,
        "wires": []
    },
    {
        "id": "20ab6f05d4116035",
        "type": "BlinkerUltimate",
        "z": "ba1efa06ea05afc6",
        "name": "Blinker",
        "stopbehaviorPIN1": "0",
        "stopbehaviorPIN2": "0",
        "blinkfrequency": "2000",
        "initializewith": "1",
        "payloadPropName": "payload",
        "x": 450,
        "y": 300,
        "wires": [
            [
                "d07ce346abe22eca",
                "9f690a98b5e86216"
            ],
            []
        ]
    },
    {
        "id": "9f690a98b5e86216",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 75",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 620,
        "y": 220,
        "wires": []
    },
    {
        "id": "9d93894f664d76ab",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1170,
        "y": 440,
        "wires": [
            [
                "317b24e5f6434fb1"
            ]
        ]
    },
    {
        "id": "f2b3dd789eceb792",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 3150,
        "y": 1480,
        "wires": [
            [
                "f813ca0fa1782d41"
            ]
        ]
    },
    {
        "id": "0a8eea3be7a36f07",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 87",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3755,
        "y": 820,
        "wires": [],
        "l": false
    },
    {
        "id": "ee09ace19dd9bd63",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "Save FanStatus to Global",
        "rules": [
            {
                "t": "set",
                "p": "FanStatus",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3715,
        "y": 820,
        "wires": [
            [
                "0a8eea3be7a36f07"
            ]
        ],
        "l": false
    },
    {
        "id": "3f7c04450060b798",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "On",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "Off",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3675,
        "y": 820,
        "wires": [
            [
                "ee09ace19dd9bd63"
            ]
        ],
        "l": false
    },
    {
        "id": "21f9c5fd22ba633d",
        "type": "ui_led",
        "z": "ba1efa06ea05afc6",
        "order": 13,
        "group": "9c90a075584ede2b",
        "width": 6,
        "height": 1,
        "label": "FanStatusOn",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#808080",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#00a8a8",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": true,
        "shape": "circle",
        "showGlow": true,
        "name": "FanStatusOn",
        "x": 3690,
        "y": 880,
        "wires": []
    },
    {
        "id": "5a49526254ec633c",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 59",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1060,
        "y": 1220,
        "wires": []
    },
    {
        "id": "1ec7e00827a203f3",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "iso",
        "payloadType": "date",
        "x": 610,
        "y": 1180,
        "wires": [
            [
                "fcce350793142570"
            ]
        ]
    },
    {
        "id": "b2eaf3b64480d6f3",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 28",
        "func": "// Assuming msg.payload contains the temperature in Celsius\nvar celsius = parseFloat(msg.payload);\n\n// Convert Celsius to Fahrenheit\nvar fahrenheit = (celsius * 9 / 5) + 32;\n\n// Update msg.payload with the temperature in Fahrenheit\nmsg.payload = fahrenheit;\n\n// Return the updated message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1180,
        "wires": [
            [
                "5a49526254ec633c",
                "5958b3c8cf0419ac"
            ]
        ]
    },
    {
        "id": "aa537c8a12e25d92",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 31",
        "func": "// Assuming msg.payload contains the temperature in Celsius\nvar celsius = parseFloat(msg.payload);\n\n// Convert Celsius to Fahrenheit\nvar fahrenheit = (celsius * 9 / 5) + 32;\n\n// Update msg.payload with the temperature in Fahrenheit\nmsg.payload = fahrenheit;\n\n// Return the updated message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1380,
        "wires": [
            [
                "327fbbbb0581fca8",
                "23403ea5d796707b"
            ]
        ]
    },
    {
        "id": "f813ca0fa1782d41",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 35",
        "func": "// Retrieve global context values\nvar ElementMUA1 = global.get('ElementMua1');\nvar TargetTemp = global.get('TargetTemp');\nvar isAway = global.get('ghostThermostat.away'); // Retrieve the 'away' status from global context\nvar freezeTrip = global.get('freezeTrip'); // Retrieve the freeze trip status from global context\n\n// Log the retrieved values for debugging\nnode.warn(\"ElementMUA1: \" + ElementMUA1 + \", TargetTemp: \" + TargetTemp + \", isAway: \" + isAway + \", freezeTrip: \" + freezeTrip);\n\n// Check if the freeze trip has occurred\nif (freezeTrip) {\n    msg.payload = 0; // Disable cooling if freezeTrip is true\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Freeze stat tripped, no cooling\" });\n    return msg; // Stop further processing if freeze trip is active\n}\n\n// Check if the thermostat is set to 'away'\nif (isAway) {\n    msg.payload = 0; // Set payload to 0 if 'away' is true\n    node.status({ fill: \"yellow\", shape: \"ring\", text: \"Thermostat is away, no cooling\" });\n} else {\n    // Only proceed with checking temperature difference if not in 'away' mode\n    if (msg.payload === 1) {\n        var TempDifference = ElementMUA1 - TargetTemp;\n\n        // Store the differential in the node context\n        context.set('CoolingDifferential', TempDifference);\n\n        // Set node status based on TempDifference\n        if (TempDifference > 1.5) {\n            msg.payload = 1;\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Cooling needed, diff > 1.5\" });\n        } else {\n            msg.payload = 0;\n            node.status({ fill: \"red\", shape: \"ring\", text: \"No cooling needed, diff <= 1.5\" });\n        }\n    } else if (msg.payload === 0) {\n        // If msg.payload is 0, ensure that it explicitly shows no cooling\n        msg.payload = 0;\n        node.status({ fill: \"red\", shape: \"ring\", text: \"Cooling disabled by payload\" });\n    } else {\n        // Default case to ensure the status is cleared\n        msg.payload = 0;\n        node.status({});\n    }\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3270,
        "y": 1380,
        "wires": [
            [
                "e6c90ac789774ab7",
                "87fd94ac5a98a191"
            ]
        ]
    },
    {
        "id": "f78ccc7ad2ed62c2",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "Unoccupied",
        "func": "// Retrieve the current time from the global context and log it for debugging\nvar currentTimeString = global.get(\"CurrentTime\");\nconsole.log(\"Current Time from Global Context:\", currentTimeString);\n\nif (!currentTimeString) {\n    console.log(\"Error: Current time string is undefined.\");\n    node.status({fill:\"yellow\", shape:\"ring\", text:\"Error: Time undefined\"});\n    return; // Stop execution if the time is not defined\n}\n\n// Create a Date object from the timestamp directly\nvar currentTime = new Date(currentTimeString);\nvar localHour = currentTime.getHours(); // Directly use the hours as they are the correct local time\nconsole.log(\"Current Local Hour:\", localHour);\n\n// Retrieve the user-defined 'away' start time or default to 18\nvar awayStartTime = global.get(\"awayStartTime\") || 10;\n\n// Initialize outputs\nvar msg = { payload: null, topic: null };\nvar secondOutput = { payload: null, topic: null };\nvar thirdOutput = { payload: null, topic: null };\nvar fourthOutput = { payload: null, topic: null };\nvar nodeStatus = { fill: \"\", shape: \"ring\", text: \"\" };\n\n// Check if the current hour falls within the \"away\" period (after 'awayStartTime' or before 07:00)\nif (localHour + 5 >= awayStartTime || localHour + 5 < 4) {\n    msg.payload = true;\n    msg.topic = \"away\";\n    secondOutput.payload = 73; // Set target temperature for away mode\n    secondOutput.topic = \"target_temperature\";\n    thirdOutput.payload = \"off\"; // Turn off HVAC in away mode\n    thirdOutput.topic = \"hvac_state\";\n    fourthOutput.payload = 0; // Turn off the fan in away mode\n    fourthOutput.topic = \"fan\";\n    nodeStatus.fill = \"red\";\n    nodeStatus.text = \"Away\";\n    console.log(\"Setting to Away Mode\");\n} else {\n    msg.payload = false;\n    msg.topic = \"away\";\n    secondOutput.payload = 62; // Set target temperature for present mode\n    secondOutput.topic = \"target_temperature\";\n    thirdOutput.payload = \"cooling\"; // Set HVAC to cooling in present mode\n    thirdOutput.topic = \"hvac_state\";\n    fourthOutput.payload = 1; // Turn on the fan in present mode\n    fourthOutput.topic = \"fan\";\n    nodeStatus.fill = \"green\";\n    nodeStatus.text = \"Present\";\n    console.log(\"Setting to Present Mode\");\n}\n\n// Update and save node status\nnode.status(nodeStatus);\n\n// Log final values for further debugging\nconsole.log(\"Final msg Object:\", msg);\nconsole.log(\"Final secondOutput Object:\", secondOutput);\nconsole.log(\"Final Third Output Object:\", thirdOutput);\nconsole.log(\"Final Fourth Output Object:\", fourthOutput);\nconsole.log(\"Final Node Status:\", nodeStatus);\n\nreturn [msg, secondOutput, thirdOutput, fourthOutput];",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1120,
        "wires": [
            [
                "d10958c594703afb",
                "097a619a9b65f6e0"
            ],
            [
                "d10958c594703afb"
            ],
            [
                "d10958c594703afb"
            ],
            [
                "a149acf38ac7dfee"
            ]
        ]
    },
    {
        "id": "097a619a9b65f6e0",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 99",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 1040,
        "wires": []
    },
    {
        "id": "a149acf38ac7dfee",
        "type": "link out",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "unoccupiedfanout",
        "mode": "link",
        "links": [
            "802b413aaff7b87a"
        ],
        "x": 2065,
        "y": 1100,
        "wires": []
    },
    {
        "id": "802b413aaff7b87a",
        "type": "link in",
        "z": "ba1efa06ea05afc6",
        "name": "link in 1",
        "links": [
            "a149acf38ac7dfee"
        ],
        "x": 3155,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "f218eb54137c67e2",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 1610,
        "y": 1120,
        "wires": [
            [
                "c6aa5ca9002fafda"
            ]
        ]
    },
    {
        "id": "add328c3eaa206e0",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 39",
        "func": "global.set(\"awayStartTime\", msg.payload);\nreturn msg; // Pass along for optional further use",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "bbde52d80f1b21ab",
        "type": "ui_numeric",
        "z": "ba1efa06ea05afc6",
        "name": "AwayTime",
        "label": "AwayTime",
        "tooltip": "",
        "group": "9c90a075584ede2b",
        "order": 8,
        "width": 6,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "18",
        "max": "23",
        "step": 1,
        "className": "",
        "x": 1690,
        "y": 1060,
        "wires": [
            [
                "add328c3eaa206e0"
            ]
        ]
    },
    {
        "id": "c6aa5ca9002fafda",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 40",
        "func": "// Retrieve CurrentTime from global context\nvar currentTime = global.get(\"CurrentTime\");\n\n// Convert the current time to a Date object and add 5 hours\nvar adjustedTime = new Date(currentTime);\nadjustedTime.setHours(adjustedTime.getHours() + 5);\n\n// Extract the hour from the adjusted time\nvar adjustedHour = adjustedTime.getHours();\n\n// Check if the adjusted hour is 23 or 5\nif (adjustedHour === 23 || adjustedHour === 5) {\n    msg.payload = 1;\n    node.status({fill:\"green\", shape:\"dot\", text:\"Trigger active at adjusted hour: \" + adjustedHour});\n} else {\n    // Update node status to show it's inactive but do nothing\n    node.status({fill:\"grey\", shape:\"ring\", text:\"Inactive adjusted hour: \" + adjustedHour});\n    return null; // This stops the message from being sent further\n}\n\n// Return the message object to continue the flow\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1120,
        "wires": [
            [
                "f78ccc7ad2ed62c2"
            ]
        ]
    },
    {
        "id": "23403ea5d796707b",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 100",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1150,
        "y": 1420,
        "wires": []
    },
    {
        "id": "327fbbbb0581fca8",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 45",
        "func": "// Initialize context variables if they don't exist\nvar lastValidNumber = context.get('lastValidNumber') || 0; // default to 0 if not set\n\n// Check if the incoming payload is a valid number and less than 100\nif (typeof msg.payload === 'number' && !isNaN(msg.payload) && msg.payload < 100) {\n    // If valid and less than 100, store the new value as the last valid number\n    lastValidNumber = msg.payload;\n    context.set('lastValidNumber', lastValidNumber);\n} else {\n    // If not valid or greater than or equal to 100, use the last valid number\n    msg.payload = lastValidNumber;\n}\n\n// Output the message with the valid number\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "ed7750293ab16443",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 106",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1270,
        "y": 1220,
        "wires": []
    },
    {
        "id": "5958b3c8cf0419ac",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 46",
        "func": "// Initialize context variables if they don't exist\nvar lastValidNumber = context.get('lastValidNumber');\n\n// If lastValidNumber doesn't exist and msg.payload is valid, initialize lastValidNumber to the current payload\nif (lastValidNumber === undefined && typeof msg.payload === 'number' && !isNaN(msg.payload)) {\n    lastValidNumber = msg.payload;\n    context.set('lastValidNumber', lastValidNumber); // Save it for future use\n}\n\n// Check if the incoming payload is a valid number and not negative\nif (typeof msg.payload === 'number' && !isNaN(msg.payload) && msg.payload >= 10) {\n    // Check if the new payload differs from the last valid number by more than 5\n    if (Math.abs(msg.payload - lastValidNumber) > 5) {\n        // If the difference is greater than 5, use the last valid number\n        node.warn(\"Erratic reading detected. Ignoring value: \" + msg.payload);\n        msg.payload = lastValidNumber;\n    } else {\n        // If the difference is within 5, update the last valid number\n        lastValidNumber = msg.payload;\n        context.set('lastValidNumber', lastValidNumber);\n    }\n} else {\n    // If the payload is invalid or negative, use the last valid number\n    msg.payload = lastValidNumber;\n}\n\n// Output the message with the valid number\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1180,
        "wires": [
            [
                "ed7750293ab16443",
                "b2421f25c8e7fa1d"
            ]
        ]
    },
    {
        "id": "b2421f25c8e7fa1d",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 47",
        "func": "// Check if msg.payload is a number\nif (typeof msg.payload === 'number') {\n    // Add 1.732 to the incoming payload\n    msg.payload -= 1.9851247;\n} else {\n    // If msg.payload is not a number, throw an error\n    node.error(\"msg.payload is not a number\", msg);\n}\n\n// Send the result to the next node\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 1180,
        "wires": [
            [
                "b5927738c3b4a8f9",
                "cfe9eb4de5073cb2",
                "2d921eda34af3369"
            ]
        ]
    },
    {
        "id": "b5927738c3b4a8f9",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 108",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1450,
        "y": 1220,
        "wires": []
    },
    {
        "id": "489159f859947bb8",
        "type": "Bme280",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "",
        "bus": "1",
        "address": "0x76",
        "topic": "bme280",
        "extra": false,
        "preasure": 1013.25,
        "x": 340,
        "y": 1340,
        "wires": [
            [
                "1a20dab978e3e939"
            ]
        ]
    },
    {
        "id": "041e2e2af47e22e0",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1340,
        "wires": [
            [
                "489159f859947bb8"
            ]
        ]
    },
    {
        "id": "1a20dab978e3e939",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.temperature_C",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 1340,
        "wires": [
            [
                "489f60ca89777b2a"
            ]
        ]
    },
    {
        "id": "489f60ca89777b2a",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "Temp Conversion",
        "func": "// Function to convert Celsius to Fahrenheit\nfunction celsiusToFahrenheit(celsius) {\n    return ((celsius * 9) / 5 + 32).toFixed(2);\n}\n\n// Extract temperature value from the incoming message\nvar temperatureCelsius = msg.payload;\n\n// Convert temperature to Fahrenheit\nvar temperatureFahrenheit = celsiusToFahrenheit(temperatureCelsius);\n\n// Create a new message with the converted temperature\nmsg.payload = temperatureFahrenheit;\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1340,
        "wires": [
            [
                "2e77718d64c0f483"
            ]
        ]
    },
    {
        "id": "2e77718d64c0f483",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "debug 78",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 680,
        "y": 1400,
        "wires": []
    },
    {
        "id": "c2d56e5d4ee85c92",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 15",
        "func": "var dishchargeAir = global.get(\"DischargeAir\");\nvar activeSwitchState = global.get(\"ActiveSwitchState\");\nvar activeAlarms = global.get(\"ActiveAlarms\");\nvar returnAir = global.get(\"ReturnAir\");\nvar hvacState = global.get(\"HvacState\");\nvar outdoorAirTemp = global.get(\"OutdoorAirTemp\");\nvar targetTemp = global.get(\"TargetTemp\");\nvar setpointDifferential = global.get(\"SetpointDifferntial\");\nvar awayStartTime = global.get(\"AwayStartTime\");\nvar fanStatus = global.get(\"FanStatus\");\nvar southOffice = global.get(\"SouthOffice\")\n// Construct fields object for InfluxDB payload\nvar influxFields = {\n    DischargeAir: dishchargeAir,\n    ActiveSwitchState: activeSwitchState,\n    ActiveAlarms: activeAlarms,\n    ReturnAir: returnAir,\n    HvacState: hvacState,\n    OutdoorAirTemp: outdoorAirTemp,\n    TargetTemp: targetTemp,\n    SetpointDifferential: setpointDifferential,\n    AwayStartTime: awayStartTime,\n    SouthOffice: southOffice,\n    FanStatus: fanStatus\n};\n\n// Output the InfluxDB messages\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"Values retrieved\" });\n\n// Send InfluxDB payload with fields object\nnode.send({\n    payload: influxFields\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 3600,
        "wires": [
            [
                "d7062d6c1e76a8f5"
            ]
        ]
    },
    {
        "id": "d7062d6c1e76a8f5",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 100",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2290,
        "y": 3640,
        "wires": []
    },
    {
        "id": "9d1dbcaae21dc7a6",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 1790,
        "y": 3600,
        "wires": [
            [
                "c2d56e5d4ee85c92"
            ]
        ]
    },
    {
        "id": "65ec3fe49662ba59",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "function 15",
        "func": "// Retrieve variables from global context\nvar dischargeAir = global.get(\"DischargeAir\").toString();  // Ensure it's a string\nvar activeSwitchState = global.get(\"ActiveSwitchState\");\nvar returnAir = parseFloat(global.get(\"ReturnAir\"));\nvar hvacState = global.get(\"HvacState\");\nvar outdoorAirTemp = parseFloat(global.get(\"OutdoorAirTemp\"));\nvar targetTemp = global.get(\"TargetTemp\").toString();  // Ensure it's a string\nvar setpointDifferential = parseFloat(global.get(\"SetpointDifferential\"));\nvar fanStatus = global.get(\"FanStatus\");\nvar alarmStatus = global.get(\"AlarmStatus\")\nvar southOffice = global.get(\"SouthOffice\");\n\n// Construct fields object for InfluxDB payload\nvar influxFields = {\n    DischargeAir: dischargeAir,\n    ActiveSwitchState: activeSwitchState,\n    ReturnAir: returnAir,\n    HvacState: hvacState,\n    OutdoorAirTemp: outdoorAirTemp,\n    TargetTemp: targetTemp,\n    SetpointDifferential: setpointDifferential,\n    FanStatus: fanStatus,\n    AlarmStatus: alarmStatus,  // AlarmStatus from the global context\n    SouthOffice: southOffice\n};\n\n// Output the InfluxDB messages\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"Values retrieved\" });\n\n// Send InfluxDB payload with fields object\nnode.send({\n    payload: influxFields\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3010,
        "y": 2460,
        "wires": [
            [
                "4d8c438ed44a8f07"
            ]
        ]
    },
    {
        "id": "4d8c438ed44a8f07",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "debug 100",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3190,
        "y": 2460,
        "wires": []
    },
    {
        "id": "4fba794b720e7ee2",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 2770,
        "y": 2460,
        "wires": [
            [
                "166b7f40edcd40a9",
                "ad09cce6b1602951",
                "65ec3fe49662ba59"
            ]
        ]
    },
    {
        "id": "ad09cce6b1602951",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "function 41",
        "func": "// Retrieve variables from global context\nvar dischargeAir = global.get(\"DischargeAir\");\nvar southOffice = global.get(\"SouthOffice\");\n\nvar alarmStatus;\n\n// Check DischargeAir thresholds\nif (dischargeAir > 80) {\n    alarmStatus = 'HighAlarm';\n} else if (dischargeAir < 40) {\n    alarmStatus = 'LowAlarm';\n}\n\n// Check SouthOffice thresholds\nif (southOffice > 75) {\n    alarmStatus = 'HighAlarm';\n} else if (southOffice < 62) {\n    alarmStatus = 'LowAlarm';\n}\n\n// If no alarms are triggered\nif (!alarmStatus) {\n    alarmStatus = 'Clear';\n}\n\n// Save AlarmStatus to global context\nglobal.set('AlarmStatus', alarmStatus);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3010,
        "y": 2540,
        "wires": [
            [
                "f4fbea5128325ea7"
            ]
        ]
    },
    {
        "id": "f4fbea5128325ea7",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "debug 101",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3190,
        "y": 2540,
        "wires": []
    },
    {
        "id": "166b7f40edcd40a9",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "function 48",
        "func": "var fanStatus = global.get(\"FanStatus\")\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3010,
        "y": 2380,
        "wires": [
            [
                "5e1c6441e7ead1c3"
            ]
        ]
    },
    {
        "id": "5e1c6441e7ead1c3",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "debug 109",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3210,
        "y": 2380,
        "wires": []
    },
    {
        "id": "7a842ef1fd0f7e90",
        "type": "8relind",
        "z": "ba1efa06ea05afc6",
        "name": "Fan Enable",
        "stack": "0",
        "relay": "1",
        "payload": "payload",
        "payloadType": "msg",
        "x": 3430,
        "y": 880,
        "wires": [
            [
                "3db0ef4e87f3994d",
                "21f9c5fd22ba633d",
                "3f7c04450060b798"
            ]
        ]
    },
    {
        "id": "dc7b779d73edf260",
        "type": "8relind",
        "z": "ba1efa06ea05afc6",
        "name": "Damper Actuator",
        "stack": "0",
        "relay": "2",
        "payload": "payload",
        "payloadType": "msg",
        "x": 3070,
        "y": 880,
        "wires": [
            [
                "43ba22c3a174a0ab",
                "9b2e421f5f77a426",
                "7a842ef1fd0f7e90"
            ]
        ]
    },
    {
        "id": "16791021e8921dae",
        "type": "8relind",
        "z": "ba1efa06ea05afc6",
        "name": "Chiller Enable",
        "stack": "0",
        "relay": "4",
        "payload": "payload",
        "payloadType": "msg",
        "x": 3887.89111328125,
        "y": 1325.397216796875,
        "wires": [
            [
                "df1cbbb8ad792e1e",
                "fe0417e7443edf8d"
            ]
        ]
    },
    {
        "id": "50e475f3baa156d5",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 3605,
        "y": 1320,
        "wires": [
            [
                "16791021e8921dae"
            ]
        ],
        "l": false
    },
    {
        "id": "f00e9bc6aab683c5",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 3605,
        "y": 1280,
        "wires": [
            [
                "16791021e8921dae"
            ]
        ],
        "l": false
    },
    {
        "id": "d8e6272523395e33",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 3395,
        "y": 1580,
        "wires": [
            [
                "cbb2c089f2d65f91"
            ]
        ],
        "l": false
    },
    {
        "id": "b80167eb75806433",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 3395,
        "y": 1540,
        "wires": [
            [
                "cbb2c089f2d65f91"
            ]
        ],
        "l": false
    },
    {
        "id": "dc14991f45940be6",
        "type": "IND 0-10V out",
        "z": "ba1efa06ea05afc6",
        "name": "VFD Speed Ref 0-10",
        "stack": "0",
        "channel": "1",
        "payload": "payload",
        "payloadType": "msg",
        "x": 3660,
        "y": 600,
        "wires": [
            [
                "97a56b79c9f7584a",
                "efa61411b57b89a3",
                "49b6d1f3d051d80b"
            ]
        ]
    },
    {
        "id": "33ea535dbc615ac5",
        "type": "IND 0-10V in",
        "z": "ba1efa06ea05afc6",
        "name": "Building Pressure Switch",
        "stack": "0",
        "channel": "4",
        "payload": "payload",
        "payloadType": "msg",
        "x": 2930,
        "y": 600,
        "wires": [
            [
                "c8c425864da01440",
                "f8e69e934375cfbe"
            ]
        ]
    },
    {
        "id": "3f7832341627e608",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 110",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3370,
        "y": 540,
        "wires": []
    },
    {
        "id": "c8c425864da01440",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 49",
        "func": "// Initialize context variables if they don't exist\nvar lastValidVoltage = context.get('lastValidVoltage');\n\n// Check if lastValidVoltage has never been set, initialize it with a reasonable starting value\nif (lastValidVoltage === undefined) {\n    lastValidVoltage = 0.060;\n    context.set('lastValidVoltage', lastValidVoltage); // Save the initial value in the context\n    node.warn(\"Initializing lastValidVoltage to: \" + lastValidVoltage);\n}\n\n// Get the incoming voltage\nvar currentVoltage = msg.payload;\n\n// Define the maximum allowable voltage change to detect erratic readings\nvar maxVoltageChange = 1.5; // Adjust this value based on your expected voltage fluctuations\n\n// Check for erratic voltage readings (if the voltage jump is too large, ignore the reading)\nif (Math.abs(currentVoltage - lastValidVoltage) > maxVoltageChange) {\n    node.warn(\"Erratic voltage detected. Ignoring value: \" + currentVoltage + \", using last valid voltage: \" + lastValidVoltage);\n    currentVoltage = lastValidVoltage; // Use the last valid voltage\n} else {\n    // Update the last valid voltage if the reading is not erratic\n    lastValidVoltage = currentVoltage;\n    context.set('lastValidVoltage', lastValidVoltage);\n    node.warn(\"Voltage updated to: \" + lastValidVoltage);\n}\n\n// Convert the valid voltage to pressure\nmsg.payload = voltageToPressureInWC(currentVoltage);\n\nfunction voltageToPressureInWC(voltage) {\n    var maxVoltage = 10.0;  // Maximum output voltage of the sensor\n    var zeroOffset = 0.1346;  // Corrected zero offset voltage\n    var maxPressurePa = 2500;  // Maximum pressure range of the sensor in Pascals\n    var minPressurePa = 0;  // Minimum pressure range of the sensor in Pascals\n    var paToInWC = 0.00401865;  // Conversion factor from Pascals to inches of water column\n\n    // Calculate pressure in Pascals from voltage with offset adjustment\n    var pressurePa = ((voltage - zeroOffset) / (maxVoltage - zeroOffset)) * (maxPressurePa - minPressurePa) + minPressurePa;\n\n    // Ensure the pressure remains positive by flipping the sign if necessary\n    if (pressurePa < 0) {\n        pressurePa = Math.abs(pressurePa);\n    }\n\n    // Convert pressure from Pascals to inches of water column\n    var pressureInWC = pressurePa * paToInWC;\n\n    // Return value rounded to 3 decimal places\n    return parseFloat(pressureInWC.toFixed(3));\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 600,
        "wires": [
            [
                "3f7832341627e608",
                "597e9b122342b9a9",
                "d92ecf14434f32ce",
                "7d9fd08efa740637"
            ]
        ]
    },
    {
        "id": "f8e69e934375cfbe",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 111",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3170,
        "y": 540,
        "wires": []
    },
    {
        "id": "e6c90ac789774ab7",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 50",
        "func": "// Retrieve the alarm statuses from global context\nvar heatingAlarm = global.get('heating_alarm') || \"Normal\";\nvar coolingAlarm = global.get('cooling_alarm') || \"Normal\";\nvar ventAlarm = global.get('vent_alarm') || \"Normal\";\n\n// Check if the incoming msg.payload is 1 (start cooling) or 0 (shut down or vent mode)\nif (msg.payload === 1) {\n    // Cooling Logic\n    var DischargeAir = global.get('DischargeAir');\n    var OutdoorAirTemp = global.get('OutdoorAirTemp');\n    var TargetTemp = global.get('TargetTemp');\n    var VFDspeed = 95; // Set VFD to 92% for all cooling modes\n    var stage2Activated = context.get('stage2Activated') || false;  // Track if Stage 2 is already activated\n    var stage2TimerSet = context.get('stage2TimerSet') || false;  // Track if the timer for Stage 2 is already set\n\n    // Define thresholds\n    var stage1Threshold = 50; // Temperature to activate Stage 1\n    var stage2Threshold = 58; // Temperature to activate Stage 2\n    var lockoutThreshold = 65; // Cooling lockout if OutdoorAirTemp is below this value\n\n    // Stage 2 delay configuration (5 minutes)\n    var stage2Delay = 150000; // 150000 ms = 2.5 minutes\n\n    // Check OutdoorAirTemp interlock\n    if (OutdoorAirTemp < lockoutThreshold) {\n        node.warn(\"Cooling locked out. OutdoorAirTemp is below threshold.\");\n\n        var output0 = { payload: 0 };  // Chiller Enable\n        var output1 = { payload: 0 };  // Stage 1\n        var output2 = { payload: 0 };  // Stage 2\n        global.set('VFDspeed', 98);  // Set VFD to vent mode speed (98%)\n        node.status({ fill: \"blue\", shape: \"ring\", text: \"Cooling locked out, vent mode active (VFD Speed: 98%)\" });\n        return [output0, output1, output2, { payload: (98 / 100) * 10 }]; // Set VFD to 92% for vent mode\n    }\n\n    // Activate cooling logic\n    var output0 = { payload: 1 };  // Chiller Enable\n    var output1 = { payload: 0 };  // Stage 1\n    var output2 = { payload: 0 };  // Stage 2\n\n    if (DischargeAir >= stage1Threshold) {\n        output1.payload = 1;  // Activate Stage 1\n        node.warn(\"Stage 1 activated.\");\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Stage 1 active, VFD Speed: 98%\" });\n    }\n\n    // Adjust VFD speed dynamically based on cooling stages\n    if (output1.payload === 1) {\n        VFDspeed = 85;  // Set VFD to 98% for Stage 1\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Cooling active, Stage 1, VFD Speed: 98%\" });\n    } else {\n        VFDspeed = 98; // No cooling, transition to vent mode at 92% speed\n        node.status({ fill: \"yellow\", shape: \"ring\", text: \"No active cooling, vent mode (VFD Speed: 98%)\" });\n    }\n\n    global.set('VFDspeed', VFDspeed);  // Update global VFD speed\n\n    // Set the timer for Stage 2 activation, but only if it hasn't been set yet\n    if (!stage2TimerSet && !stage2Activated) {\n        node.warn(\"Setting Stage 2 activation timer...\");\n        stage2TimerSet = true;\n        context.set('stage2TimerSet', stage2TimerSet);  // Store timer set status\n\n        setTimeout(function () {\n            // Recheck DischargeAir temperature for Stage 2 activation\n            DischargeAir = global.get('DischargeAir');\n            if (DischargeAir >= stage2Threshold) {\n                output2.payload = 1;  // Activate Stage 2\n                VFDspeed = 98;  // Keep VFD speed at 92% for Stage 2\n                global.set('VFDspeed', VFDspeed);  // Save updated VFD speed\n                stage2Activated = true;\n                context.set('stage2Activated', stage2Activated);  // Mark Stage 2 as activated\n                node.status({ fill: \"green\", shape: \"dot\", text: \"Stage 2 active, VFD Speed: 98%\" });\n                node.send([output0, output1, output2, { payload: (VFDspeed / 100) * 10 }]);  // Send VFD output after delay\n            } else {\n                node.warn(\"Stage 2 not activated. DischargeAir below threshold.\");\n                node.status({ fill: \"yellow\", shape: \"ring\", text: \"Stage 2 not needed, VFD Speed: \" + VFDspeed + \"%\" });\n                // Send current output states even if Stage 2 isn't activated\n                node.send([output0, output1, output2, { payload: (VFDspeed / 100) * 10 }]);\n            }\n        }, stage2Delay);\n    }\n\n    // Send VFD output (separate from cooling stages)\n    return [output0, output1, output2, { payload: (VFDspeed / 100) * 10 }];\n} else if (msg.payload === 0) {\n    // Handle shutdown logic (no cooling and check for alarms)\n\n    // Check if any alarms are present\n    if (heatingAlarm === \"Alarm\" || coolingAlarm === \"Alarm\" || ventAlarm === \"Alarm\") {\n        // If any alarms are present, shut everything down (no vent mode)\n        node.warn(\"Alarm detected, shutting down all systems.\");\n        var output0 = { payload: 0 };  // Chiller Disable\n        var output1 = { payload: 0 };  // Stage 1 Off\n        var output2 = { payload: 0 };  // Stage 2 Off\n        global.set('VFDspeed', 0);  // Set VFD speed to 0% (complete shutdown)\n\n        // Update node status for complete shutdown due to alarm\n        node.status({ fill: \"red\", shape: \"ring\", text: \"Alarm detected, systems shut down (VFD Speed: 0%)\" });\n\n        // Return all zeros for complete system shutdown\n        return [output0, output1, output2, { payload: 0 }];\n    }\n\n    // If no alarms, transition to vent mode\n    node.warn(\"No cooling needed, transitioning to vent mode.\");\n\n    // Reset Stage 2 activation and timer if cooling stops\n    context.set('stage2Activated', false);\n    context.set('stage2TimerSet', false);\n\n    // Transition to vent mode\n    var output0 = { payload: 0 };  // Chiller Disable\n    var output1 = { payload: 0 };  // Stage 1 Off\n    var output2 = { payload: 0 };  // Stage 2 Off\n    global.set('VFDspeed', 98);  // Set VFD speed to 98% for vent mode\n\n    // Update node status for vent mode\n    node.status({ fill: \"yellow\", shape: \"ring\", text: \"Vent mode active, VFD Speed: 98%\" });\n\n    // Return outputs for vent mode\n    return [output0, output1, output2, { payload: (98 / 100) * 10 }];  // Set VFD to 98% for vent mode\n}\n",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3430,
        "y": 1380,
        "wires": [
            [
                "16791021e8921dae",
                "f940407295b2f390"
            ],
            [
                "cbb2c089f2d65f91"
            ],
            [
                "56df0ec076e63e44",
                "b37a5e7777ac7269"
            ],
            [
                "38485f85da2a5555",
                "d56f03de742554b0"
            ]
        ]
    },
    {
        "id": "df1cbbb8ad792e1e",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 115",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 4137.89111328125,
        "y": 1325.397216796875,
        "wires": []
    },
    {
        "id": "0df5eeb5406a9a01",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 116",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 4130,
        "y": 1380,
        "wires": []
    },
    {
        "id": "1d13ba92dff4a05d",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 51",
        "func": "// Retrieve global context values\nvar ElementMUA1 = global.get('ElementMua1');\nvar TargetTemp = global.get('TargetTemp') || 70;  // Default target temp is 70°F\nvar DischargeAir = global.get('DischargeAir');\nvar OutdoorHumidity = global.get('OutdoorHumidity');\nvar isAway = global.get('ghostThermostat.away');  // Retrieve the 'away' status from global context\n\n// Set thresholds and limits\nvar dischargeAirLimit = 105;  // Heating lockout if DischargeAir exceeds 105°F\nvar humidityMin = 60;  // Minimum humidity threshold for dehumidification\nvar humidityMax = 90;  // Maximum humidity threshold for dehumidification\nvar lowFire = 2;  // Low fire signal for the gas valve\nvar maxFire = 10;  // Max fire signal for the gas valve\nvar gasValveSignal = lowFire;  // Always start at low fire\n\n// Check if system is in 'away' mode or DischargeAir exceeds the limit\nif (isAway) {\n    var output0 = { payload: 0 };  // Heat off\n    var output1 = { payload: 0 };  // Dehum off\n    var output2 = { payload: 0 };  // Gas valve signal 0\n    node.status({ fill: \"yellow\", shape: \"ring\", text: \"Away mode active, no heating or dehumidification\" });\n    return [output0, output1, output2];\n}\n\nif (DischargeAir > dischargeAirLimit) {\n    var output0 = { payload: 0 };  // Heat off\n    var output1 = { payload: 0 };  // Dehum off\n    var output2 = { payload: 0 };  // Gas valve signal 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"Heating locked out, DischargeAir > 105°F\" });\n    return [output0, output1, output2];\n}\n\n// Check for dehumidification condition (OutdoorHumidity between 50% and 90%)\nif (OutdoorHumidity > humidityMin && OutdoorHumidity < humidityMax) {\n    // Dehumidification is needed\n    if (msg.payload === 1) {\n        gasValveSignal = lowFire;  // Always low fire for dehumidification\n        var output0 = { payload: 0 };  // Heat off (can't be active with dehum)\n        var output1 = { payload: 1 };  // Dehum on\n        var output2 = { payload: gasValveSignal };  // Gas valve signal for dehum\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Dehumidification active, low fire\" });\n        return [output0, output1, output2];\n    }\n}\n\n// Handle heating logic if dehumidification is not active\nif (msg.payload === 1) {\n    var TempDifference = TargetTemp - ElementMUA1;\n    if (TempDifference >= 1.4) {\n        // Heating is needed\n        gasValveSignal = (DischargeAir < TargetTemp) ? lowFire : maxFire;  // Modulate gas valve to maintain DischargeAir setpoint\n        var output0 = { payload: 1 };  // Heat on\n        var output1 = { payload: 0 };  // Dehum off (can't be active with heat)\n        var output2 = { payload: gasValveSignal };  // Gas valve signal for heat\n        node.status({ fill: \"blue\", shape: \"dot\", text: \"Heating active, modulating gas valve\" });\n        return [output0, output1, output2];\n    } else {\n        // No heating needed\n        var output0 = { payload: 0 };  // Heat off\n        var output1 = { payload: 0 };  // Dehum off\n        var output2 = { payload: 0 };  // Gas valve off\n        node.status({ fill: \"red\", shape: \"ring\", text: \"No heating needed, within setpoint\" });\n        return [output0, output1, output2];\n    }\n}\n\n// If none of the above conditions are met, turn everything off\nvar output0 = { payload: 0 };  // Heat off\nvar output1 = { payload: 0 };  // Dehum off\nvar output2 = { payload: 0 };  // Gas valve off\nnode.status({ fill: \"red\", shape: \"ring\", text: \"System off\" });\nreturn [output0, output1, output2];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3490,
        "y": 1100,
        "wires": [
            [
                "5eef255b953786bb"
            ],
            [
                "6829ae5ded344b69"
            ],
            [
                "95f3345b68e6d46f",
                "2abbeb91cbb877d1"
            ]
        ]
    },
    {
        "id": "41e5d8363d2f3fa0",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 52",
        "func": "// Retrieve global context values\nvar ElementMUA1 = global.get('ElementMua1');\nvar TargetTemp = global.get('TargetTemp');\nvar OutdoorHumidity = global.get('OutdoorHumidity');\nvar isAway = global.get('ghostThermostat.away');  // Retrieve the 'away' status from global context\n\n// Save the current value of OutdoorHumidity to node context for debugging\ncontext.set('OutdoorHumidity', OutdoorHumidity);\n\n// Set humidity thresholds for dehumidification\nvar humidityMin = 50;  // Minimum humidity threshold for dehumidification\nvar humidityMax = 90;  // Maximum humidity threshold for dehumidification\n\n// If the incoming msg.payload is 0, pass it directly as a shutdown command\nif (msg.payload === 0) {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Shutdown command received\" });\n    return msg;  // Pass the shutdown command to the next node\n}\n\n// If the thermostat is set to 'away', send 0 as the payload\nif (isAway) {\n    msg.payload = 0;  // Set payload to 0 if 'away' is true\n    node.status({ fill: \"yellow\", shape: \"ring\", text: \"Thermostat is away, no heating or dehumidification\" });\n    return msg;  // Pass the modified payload to the next node\n}\n\n// Default state for payload\nmsg.payload = 0;\n\n// Check if dehumidification is needed based on OutdoorHumidity\nif (OutdoorHumidity > humidityMin && OutdoorHumidity < humidityMax) {\n    msg.payload = 1;  // Set a unique payload value for dehumidification\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Dehumidification needed, OutdoorHumidity in range\" });\n}\n\n// Check for heating conditions\nvar TempDifference = TargetTemp - ElementMUA1;\n// Heating logic based on TempDifference\nif (TempDifference >= 1.4) {  // Heating needed when difference is positive and large enough\n    msg.payload = 1;  // Heating on\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Heating needed, diff >= 1.4\" });\n} else if (msg.payload === 0) {\n    // If no dehumidification or heating needed\n    node.status({ fill: \"red\", shape: \"ring\", text: \"No heating needed, diff < 1.4\" });\n}\n\n// Return the modified message (either dehumidification, heating, or shutdown)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3270,
        "y": 1040,
        "wires": [
            [
                "1d13ba92dff4a05d"
            ]
        ]
    },
    {
        "id": "d101a8cf5ae8c7fe",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 3110,
        "y": 1040,
        "wires": [
            [
                "41e5d8363d2f3fa0",
                "f813ca0fa1782d41"
            ]
        ]
    },
    {
        "id": "597e9b122342b9a9",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 53",
        "func": "// Retrieve the global VFDspeed, or default to building pressure control if not set\nvar globalVFDspeed = global.get('VFDspeed');\n\nif (globalVFDspeed === null || globalVFDspeed === undefined) {\n    // If no global VFD speed is set, switch to vent mode (pressure-based control)\n    var buildingPressure = msg.payload.pressure;\n\n    // Retrieve HvacState and ActiveSwitchState from global context\n    var hvacState = global.get('HvacState');\n    var activeSwitchState = global.get('ActiveSwitchState');\n\n    // Smoothing logic for building pressure\n    var smoothingWindow = 5;\n    if (context.get('pressureReadings') === undefined) {\n        context.set('pressureReadings', []);\n    }\n    var pressureReadings = context.get('pressureReadings');\n    pressureReadings.push(buildingPressure);\n    if (pressureReadings.length > smoothingWindow) {\n        pressureReadings.shift();\n    }\n    var smoothedPressure = pressureReadings.reduce((a, b) => a + b, 0) / pressureReadings.length;\n    context.set('pressureReadings', pressureReadings);\n\n    // Define the target building pressure range (in \"wc\")\n    var minPressure = -0.50;  // Lower threshold\n    var maxPressure = 1.0;    // Upper threshold\n\n    // Define the VFD control output range (0-10V)\n    var minVFDOutput = 2.7; // Minimum VFD output for minimum speed\n    var maxVFDOutput = 10;  // Maximum VFD output for maximum speed\n\n    // Calculate VFD output for vent mode based on building pressure\n    var vfdOutput = ((smoothedPressure - minPressure) / (maxPressure - minPressure)) * (maxVFDOutput - minVFDOutput) + minVFDOutput;\n\n    msg.payload = vfdOutput.toFixed(2); // Round to 2 decimal places for precision\n} else {\n    // Use global VFD speed from cooling logic\n    msg.payload = (globalVFDspeed / 100) * 10;  // Convert to 0-10V\n}\n\n// Set the VFD output and update status\nnode.status({ fill: \"green\", shape: \"dot\", text: \"VFD Output: \" + msg.payload + \"V\" });\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3430,
        "y": 600,
        "wires": [
            [
                "8465efae4b7692c8",
                "dc14991f45940be6"
            ]
        ]
    },
    {
        "id": "8465efae4b7692c8",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 119",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3570,
        "y": 540,
        "wires": []
    },
    {
        "id": "97a56b79c9f7584a",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 120",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3830,
        "y": 540,
        "wires": []
    },
    {
        "id": "0d2b0e63f51d1554",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 54",
        "func": "// Retrieve ActiveSwitchState, HvacState, DischargeAir, and the Manual Reset from global context\nvar ActiveSwitchState = global.get('ActiveSwitchState');\nvar HvacState = global.get('HvacState');\nvar DischargeAir = global.get('DischargeAir'); // Retrieve DischargeAir for LowLimitFreezeStat\nvar manualReset = global.get('ManualReset'); // Retrieve the manual reset trigger (true/false)\n\n// Set the LowLimitFreezeStat threshold\nvar freezeStatLimit = 40; // Example threshold, customize based on your freeze stat setting\n\n// Initialize or retrieve the freeze trip status from the context and global\nvar freezeTrip = context.get('freezeTrip') || global.get('freezeTrip') || false;\n\n// Check if the LowLimitFreezeStat is tripped based on DischargeAir\nif (DischargeAir < freezeStatLimit) {\n    // LowLimitFreezeStat tripped, set freezeTrip to true and disable VFD (msg.payload = 0)\n    freezeTrip = true;\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Freeze stat tripped, DischargeAir < \" + freezeStatLimit + \"°F\" });\n} else {\n    // No freeze trip detected, ensure freezeTrip is false\n    freezeTrip = false;\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Freeze stat normal, DischargeAir >= \" + freezeStatLimit + \"°F\" });\n}\n\n// Save the freezeTrip state in both the context and global context\ncontext.set('freezeTrip', freezeTrip);\nglobal.set('freezeTrip', freezeTrip);\n\n// Check if the system needs to be manually reset after the freeze trip\nif (freezeTrip) {\n    if (manualReset === true) {\n        // Manual reset has been triggered, reset the system and set freezeTrip to false\n        freezeTrip = false;\n        context.set('freezeTrip', freezeTrip); // Reset freeze trip state in the context\n        global.set('freezeTrip', freezeTrip);  // Reset freeze trip state in the global context\n        global.set('ManualReset', false); // Reset the manual trigger to prevent auto-resetting\n\n        // Send msg.payload = 1 to indicate the VFD is enabled again\n        msg.payload = 1;\n        node.status({ fill: \"green\", shape: \"dot\", text: \"System reset manually, VFD Enabled\" });\n        return msg;\n    } else {\n        // System remains in freeze trip state until manual reset is triggered\n        msg.payload = 0;\n        node.status({ fill: \"red\", shape: \"ring\", text: \"Awaiting manual reset, freeze stat was tripped\" });\n        return msg;\n    }\n}\n\n// If HvacState is 'off', go into vent mode regardless of ActiveSwitchState and any potential mismatch\nif (HvacState === 'off') {\n    msg.payload = 1; // Vent mode active, VFD enabled\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Vent Mode, VFD Enabled\" });\n    return msg;\n}\n\n// Ensure both ActiveSwitchState and HvacState are either Heating or Cooling, not mixed\nif (msg.payload === 1) {\n    if ((ActiveSwitchState === 'heating' && HvacState === 'heating') ||\n        (ActiveSwitchState === 'cooling' && HvacState === 'cooling')) {\n        // Both states are Heating or both are Cooling, VFD enabled\n        msg.payload = 1;\n        node.status({ fill: \"green\", shape: \"dot\", text: \"VFD Enabled, \" + HvacState });\n    } else {\n        // States are mixed, VFD disabled\n        msg.payload = 0;\n        node.status({ fill: \"yellow\", shape: \"ring\", text: \"Mixed states, VFD Disabled\" });\n    }\n} else {\n    // When incoming msg.payload is not 1, disable VFD\n    msg.payload = 0;\n    node.status({ fill: \"red\", shape: \"ring\", text: \"VFD Disabled\" });\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 880,
        "wires": [
            [
                "e9ca97431d73953d",
                "dc7b779d73edf260"
            ]
        ]
    },
    {
        "id": "3db0ef4e87f3994d",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 121",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3530,
        "y": 820,
        "wires": []
    },
    {
        "id": "e9ca97431d73953d",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 122",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2930,
        "y": 820,
        "wires": []
    },
    {
        "id": "f27cacce65a90f7b",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 2710,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "43ba22c3a174a0ab",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 123",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3150,
        "y": 820,
        "wires": []
    },
    {
        "id": "fcce350793142570",
        "type": "IND OWB Temp",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "stack": "0",
        "channel": "1",
        "payload": "payload",
        "payloadType": "msg",
        "x": 820,
        "y": 1180,
        "wires": [
            [
                "b2eaf3b64480d6f3",
                "6d59dd0a18b80774"
            ]
        ]
    },
    {
        "id": "4dadfb8352d87747",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 3150,
        "y": 1440,
        "wires": [
            [
                "f813ca0fa1782d41"
            ]
        ]
    },
    {
        "id": "065eba0360e9f178",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 2995,
        "y": 480,
        "wires": [
            [
                "9935ee792d146516"
            ]
        ],
        "l": false
    },
    {
        "id": "0b04abcc921ac0d4",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "VFD Speed Logic",
        "info": "",
        "x": 2680,
        "y": 520,
        "wires": []
    },
    {
        "id": "cc70b55ca9a1e4c2",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "VFD Enable",
        "info": "",
        "x": 2650,
        "y": 700,
        "wires": []
    },
    {
        "id": "b0b678c1bb987693",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "Heating Logic / Interlocks",
        "info": "",
        "x": 3370,
        "y": 1000,
        "wires": []
    },
    {
        "id": "4e54a38f24f52997",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "Cooling Logic / Interlocks",
        "info": "",
        "x": 3410,
        "y": 1240,
        "wires": []
    },
    {
        "id": "c41569d74febfd22",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "Chiller Enable / Staged Capacity %",
        "info": "",
        "x": 3780,
        "y": 1240,
        "wires": []
    },
    {
        "id": "d5011e210a15d5a7",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 125",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 4110,
        "y": 1080,
        "wires": []
    },
    {
        "id": "9b2e421f5f77a426",
        "type": "ui_led",
        "z": "ba1efa06ea05afc6",
        "order": 58,
        "group": "9c90a075584ede2b",
        "width": 7,
        "height": 1,
        "label": "OutdoorAirDamper Open",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#808080",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#ffa500",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": true,
        "shape": "circle",
        "showGlow": true,
        "name": "OutdoorAirDamper Open",
        "x": 3090,
        "y": 920,
        "wires": []
    },
    {
        "id": "5aaaa5210a3e647b",
        "type": "ui_text",
        "z": "ba1efa06ea05afc6",
        "group": "9c90a075584ede2b",
        "order": 20,
        "width": 7,
        "height": 1,
        "name": "VFD Speed",
        "label": "VFD SpeedRef(v)",
        "format": "{{msg.payload}} %",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#f46406",
        "x": 3970,
        "y": 680,
        "wires": []
    },
    {
        "id": "d92ecf14434f32ce",
        "type": "ui_text",
        "z": "ba1efa06ea05afc6",
        "group": "9c90a075584ede2b",
        "order": 16,
        "width": 7,
        "height": 1,
        "name": "BuildingPressure",
        "label": "BuildingPressure in \"w.c",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#f46406",
        "x": 3210,
        "y": 640,
        "wires": []
    },
    {
        "id": "95862fbca3b22679",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "BME280 Space Sensor",
        "info": "",
        "x": 360,
        "y": 1280,
        "wires": []
    },
    {
        "id": "3175be29ccdad0a2",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "Occupancy / Setback",
        "info": "",
        "x": 1760,
        "y": 1000,
        "wires": []
    },
    {
        "id": "f692d2e7dc1aafaf",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "Temp Sensor Conversion Logic",
        "info": "",
        "x": 1190,
        "y": 1340,
        "wires": []
    },
    {
        "id": "b1dff8a9ee440b41",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "Temp Sensor Conversion Logic",
        "info": "",
        "x": 1130,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d2b81f2c21ab7b30",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "d": true,
        "name": "Data to InfluxDB / Grafana",
        "info": "",
        "x": 3070,
        "y": 2320,
        "wires": []
    },
    {
        "id": "cbb2c089f2d65f91",
        "type": "8relind",
        "z": "ba1efa06ea05afc6",
        "name": "Chiller Stage1",
        "stack": "0",
        "relay": "5",
        "payload": "payload",
        "payloadType": "msg",
        "x": 3907.89111328125,
        "y": 1385.397216796875,
        "wires": [
            [
                "0df5eeb5406a9a01"
            ]
        ]
    },
    {
        "id": "b37a5e7777ac7269",
        "type": "8relind",
        "z": "ba1efa06ea05afc6",
        "name": "Chiller Stage2",
        "stack": "0",
        "relay": "6",
        "payload": "payload",
        "payloadType": "msg",
        "x": 3887.89111328125,
        "y": 1445.397216796875,
        "wires": [
            [
                "e27adc9a1c8509d6"
            ]
        ]
    },
    {
        "id": "e27adc9a1c8509d6",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 127",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 4137.89111328125,
        "y": 1445.397216796875,
        "wires": []
    },
    {
        "id": "4776c0588d6f6dec",
        "type": "ui_button",
        "z": "ba1efa06ea05afc6",
        "name": "FreezeStatReset",
        "group": "9c90a075584ede2b",
        "order": 11,
        "width": 7,
        "height": 1,
        "passthru": false,
        "label": "FreezeStat Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-refresh",
        "payload": "true",
        "payloadType": "bool",
        "topic": "payload",
        "topicType": "msg",
        "x": 2650,
        "y": 760,
        "wires": [
            [
                "d13501468dd904c7",
                "f59e5b451480b458"
            ]
        ]
    },
    {
        "id": "37a4422ba6dce9bb",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2480,
        "y": 760,
        "wires": [
            [
                "4776c0588d6f6dec"
            ]
        ]
    },
    {
        "id": "d13501468dd904c7",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "Set ManualReset",
        "rules": [
            {
                "t": "set",
                "p": "ManualReset",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2890,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "f59e5b451480b458",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2860,
        "y": 760,
        "wires": [
            [
                "0d2b0e63f51d1554"
            ]
        ]
    },
    {
        "id": "8d1ae7f289c074e4",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 3395,
        "y": 1660,
        "wires": [
            [
                "cf5ef7d290778b4e"
            ]
        ],
        "l": false
    },
    {
        "id": "35c178b708a78620",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 3395,
        "y": 1620,
        "wires": [
            [
                "b37a5e7777ac7269"
            ]
        ],
        "l": false
    },
    {
        "id": "38485f85da2a5555",
        "type": "link out",
        "z": "ba1efa06ea05afc6",
        "name": "VFDCOOLINGSPD",
        "mode": "link",
        "links": [
            "c8d3c32fb6a82721"
        ],
        "x": 3545,
        "y": 1460,
        "wires": []
    },
    {
        "id": "c8d3c32fb6a82721",
        "type": "link in",
        "z": "ba1efa06ea05afc6",
        "name": "VFDCOOLINGSPD",
        "links": [
            "38485f85da2a5555"
        ],
        "x": 3335,
        "y": 660,
        "wires": [
            [
                "597e9b122342b9a9"
            ]
        ]
    },
    {
        "id": "d56f03de742554b0",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 128",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3777.89111328125,
        "y": 1505.397216796875,
        "wires": []
    },
    {
        "id": "cf5ef7d290778b4e",
        "type": "8relind",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "stack": "0",
        "relay": "8",
        "payload": "payload",
        "payloadType": "msg",
        "x": 3510,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "efa61411b57b89a3",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 55",
        "func": "// Define the maximum and minimum voltages for the conversion\nvar maxVoltage = 10.0;  // Maximum voltage corresponding to 100%\nvar minVoltage = 0.0;   // Minimum voltage corresponding to 0%\n\n// Get the incoming voltage from msg.payload\nvar voltage = msg.payload;\n\n// Check if the voltage is within the expected range\nif (voltage < minVoltage) {\n    voltage = minVoltage;  // Cap at minimum voltage\n} else if (voltage > maxVoltage) {\n    voltage = maxVoltage;  // Cap at maximum voltage\n}\n\n// Convert the voltage to percentage\nvar percentage = ((voltage - minVoltage) / (maxVoltage - minVoltage)) * 100;\n\n// Round the percentage to 2 decimal places for accuracy\npercentage = parseFloat(percentage.toFixed(2));\n\n// Set the result as msg.payload\nmsg.payload = percentage;\n\n// Return the message with the percentage as payload\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3770,
        "y": 680,
        "wires": [
            [
                "5aaaa5210a3e647b"
            ]
        ]
    },
    {
        "id": "56df0ec076e63e44",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 129",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3950,
        "y": 1540,
        "wires": []
    },
    {
        "id": "22bfd446652ff94b",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 56",
        "func": "// Retrieve the current mode, DischargeAir temperature, and Alarm Override status\nvar mode = global.get('HvacState');  // 'heating', 'cooling', or 'vent'\nvar DischargeAir = global.get('DischargeAir');\nvar AlarmOverrideStatus = global.get('AlarmOverrideStatus') || \"Inactive\";  // Track alarm override status\n\n// Initialize output variables\nvar heatingStatus = { payload: \"Normal\" };\nvar coolingStatus = { payload: \"Normal\" };\nvar ventStatus = { payload: \"Normal\" };\nvar alarmStatus = { payload: \"Normal\" };  // Default alarm to \"Normal\" (no alarm)\nvar overrideStatus = { payload: AlarmOverrideStatus };  // Output \"Active\" or \"Inactive\" for Alarm Override\n\n// Define DischargeAir thresholds\nvar heatingMin = 40;  // Heating minimum temperature\nvar heatingMax = 105;  // Heating maximum temperature\nvar coolingMin = 40;  // Cooling minimum temperature\nvar coolingMax = 95;  // Cooling maximum temperature\nvar ventMin = 40;  // Vent minimum temperature\nvar ventMax = 95;  // Vent maximum temperature\n\n// Alarm identifiers for global context\nvar heatingAlarmId = 'heating_alarm';\nvar coolingAlarmId = 'cooling_alarm';\nvar ventAlarmId = 'vent_alarm';\n\n// Function to update global alarm status\nfunction setGlobalAlarm(alarmId, state) {\n    global.set(alarmId, state);  // Set alarm in global context\n    if (state === \"Alarm\") {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"ALARM: \" + alarmId });\n    }\n}\n\n// Handle Alarm Override logic\nif (AlarmOverrideStatus === \"Active\") {\n    alarmStatus.payload = \"Normal\";  // Override clears any alarms\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Alarm Override Active\" });\n    return [heatingStatus, coolingStatus, ventStatus, alarmStatus, overrideStatus];  // Return override status as \"Active\"\n}\n\n// Check which mode is active and validate DischargeAir thresholds\nif (mode === 'heating') {\n    if (DischargeAir < heatingMin || DischargeAir > heatingMax) {\n        heatingStatus.payload = \"Alarm\";  // Heating abnormal\n        setGlobalAlarm(heatingAlarmId, \"Alarm\");  // Set heating alarm\n        alarmStatus.payload = \"Alarm\";  // Set alarm status to \"Alarm\"\n        node.status({ fill: \"red\", shape: \"ring\", text: \"Heating abnormal: \" + DischargeAir + \"°F\" });\n    } else {\n        heatingStatus.payload = \"Normal\";  // Heating normal\n        setGlobalAlarm(heatingAlarmId, \"Normal\");  // Reset heating alarm\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Heating normal: \" + DischargeAir + \"°F\" });\n    }\n} else if (mode === 'cooling') {\n    if (DischargeAir < coolingMin || DischargeAir > coolingMax) {\n        coolingStatus.payload = \"Alarm\";  // Cooling abnormal\n        setGlobalAlarm(coolingAlarmId, \"Alarm\");  // Set cooling alarm\n        alarmStatus.payload = \"Alarm\";  // Set alarm status to \"Alarm\"\n        node.status({ fill: \"red\", shape: \"ring\", text: \"Cooling abnormal: \" + DischargeAir + \"°F\" });\n    } else {\n        coolingStatus.payload = \"Normal\";  // Cooling normal\n        setGlobalAlarm(coolingAlarmId, \"Normal\");  // Reset cooling alarm\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Cooling normal: \" + DischargeAir + \"°F\" });\n    }\n} else if (mode === 'vent') {\n    if (DischargeAir < ventMin || DischargeAir > ventMax) {\n        ventStatus.payload = \"Alarm\";  // Vent abnormal\n        setGlobalAlarm(ventAlarmId, \"Alarm\");  // Set vent alarm\n        alarmStatus.payload = \"Alarm\";  // Set alarm status to \"Alarm\"\n        node.status({ fill: \"red\", shape: \"ring\", text: \"Vent abnormal: \" + DischargeAir + \"°F\" });\n    } else {\n        ventStatus.payload = \"Normal\";  // Vent normal\n        setGlobalAlarm(ventAlarmId, \"Normal\");  // Reset vent alarm\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Vent normal: \" + DischargeAir + \"°F\" });\n    }\n} else {\n    node.warn(\"Invalid HVAC mode detected: \" + mode);\n}\n\n// Output the status for heating, cooling, vent, alarms, and alarm override\nreturn [heatingStatus, coolingStatus, ventStatus, alarmStatus, overrideStatus];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 180,
        "wires": [
            [
                "d9d46b89f0210bb0"
            ],
            [
                "65bfe8724e967e5a"
            ],
            [
                "5b495f012ab6202a"
            ],
            [
                "9ce7aed21e3b708a"
            ],
            [
                "f8708d77a5403a9c",
                "f32a60ca7e51d4aa"
            ]
        ]
    },
    {
        "id": "30cfb83b1cbf09e1",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2870,
        "y": 180,
        "wires": [
            [
                "22bfd446652ff94b"
            ]
        ]
    },
    {
        "id": "d9d46b89f0210bb0",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 57",
        "func": "if (msg.payload === \"Alarm\") {\n    msg.color = \"red\";  // Set color to red when in alarm\n} else if (msg.payload === \"Normal\") {\n    msg.color = \"green\";  // Set color to green when normal\n} else {\n    msg.color = \"white\";  // Default color if payload is missing or unexpected\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 120,
        "wires": [
            [
                "bebccebeb1f8f96b"
            ]
        ]
    },
    {
        "id": "534fac323b4f3436",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "AlarmChecks",
        "info": "",
        "x": 3030,
        "y": 80,
        "wires": []
    },
    {
        "id": "5a96ca5e5ae91d49",
        "type": "comment",
        "z": "ba1efa06ea05afc6",
        "name": "AlarmSignaling/RTN",
        "info": "",
        "x": 2930,
        "y": 260,
        "wires": []
    },
    {
        "id": "88f961f0ab9c9b8e",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 61",
        "func": "// Retrieve alarm statuses from global context\nvar heatingAlarm = global.get('heating_alarm') || \"Normal\";\nvar coolingAlarm = global.get('cooling_alarm') || \"Normal\";\nvar ventAlarm = global.get('vent_alarm') || \"Normal\";\nvar alarmOverrideStatus = global.get('AlarmOverrideStatus') || \"Inactive\"; // Retrieve the override status\nvar overrideTimerSet = global.get('OverrideTimerSet') || false; // Retrieve the timer status\n\n// Check if the incoming msg.payload === \"Active\" to trigger the 10-minute override\nif (msg.payload === \"Active\") {\n    // Set the AlarmOverrideStatus and timer\n    global.set('AlarmOverrideStatus', \"Active\");\n    global.set('OverrideTimerSet', true);\n\n    // Set a 10-minute delay for the override (600000 ms = 10 minutes)\n    setTimeout(function () {\n        global.set('AlarmOverrideStatus', \"Inactive\"); // Disable override after 10 minutes\n        global.set('OverrideTimerSet', false); // Reset the timer status\n        node.status({ fill: \"yellow\", shape: \"ring\", text: \"Alarm override expired\" });\n    }, 600000); // 10 minutes\n\n    // Send msg.payload = 1 during the override period\n    msg.payload = 1;\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Alarm override active (10 min)\" });\n    return msg;\n}\n\n// Check if any of the alarms are in \"Alarm\" and the override is not active\nif ((heatingAlarm === \"Alarm\" || coolingAlarm === \"Alarm\" || ventAlarm === \"Alarm\") && alarmOverrideStatus === \"Inactive\") {\n    // If any alarm is in \"Alarm\" state and no override, set msg.payload to 0\n    msg.payload = 0;\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Alarm detected\" });\n} else if (alarmOverrideStatus === \"Active\") {\n    // If the override is active, send msg.payload = 1\n    msg.payload = 1;\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Alarm override in effect\" });\n} else {\n    // If all alarms are \"Normal\" and no override, set msg.payload to 1\n    msg.payload = 1;\n    node.status({ fill: \"green\", shape: \"dot\", text: \"All systems normal\" });\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3270,
        "y": 400,
        "wires": [
            [
                "0617c2c3c7b6707c",
                "379622598fdf4efe"
            ]
        ]
    },
    {
        "id": "32f9518fcc1b651e",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3110,
        "y": 400,
        "wires": [
            [
                "88f961f0ab9c9b8e"
            ]
        ]
    },
    {
        "id": "0617c2c3c7b6707c",
        "type": "link out",
        "z": "ba1efa06ea05afc6",
        "name": "SystemEnable",
        "mode": "link",
        "links": [
            "9368f48a41a13ad1",
            "841648d5c29fd40b",
            "215a10466619e272"
        ],
        "x": 3415,
        "y": 400,
        "wires": []
    },
    {
        "id": "379622598fdf4efe",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 132",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3570,
        "y": 400,
        "wires": []
    },
    {
        "id": "841648d5c29fd40b",
        "type": "link in",
        "z": "ba1efa06ea05afc6",
        "name": "link in 3",
        "links": [
            "0617c2c3c7b6707c"
        ],
        "x": 2675,
        "y": 880,
        "wires": [
            [
                "0d2b0e63f51d1554"
            ]
        ]
    },
    {
        "id": "215a10466619e272",
        "type": "link in",
        "z": "ba1efa06ea05afc6",
        "name": "link in 4",
        "links": [
            "0617c2c3c7b6707c"
        ],
        "x": 3115,
        "y": 1380,
        "wires": [
            [
                "f813ca0fa1782d41"
            ]
        ]
    },
    {
        "id": "87fd94ac5a98a191",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 133",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3410,
        "y": 1280,
        "wires": []
    },
    {
        "id": "08b6fe78374389e7",
        "type": "ui_button",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "group": "9c90a075584ede2b",
        "order": 6,
        "width": 7,
        "height": 1,
        "passthru": false,
        "label": "Alarm Override - 10 Min",
        "tooltip": "10 min",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-play",
        "payload": "Active",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 3010,
        "y": 440,
        "wires": [
            [
                "88f961f0ab9c9b8e",
                "9935ee792d146516",
                "117a841b55173fb6"
            ]
        ]
    },
    {
        "id": "437fa5f842fa39db",
        "type": "ui_ui_control",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "events": "all",
        "x": 2780,
        "y": 460,
        "wires": [
            [
                "08b6fe78374389e7"
            ]
        ]
    },
    {
        "id": "65bfe8724e967e5a",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 62",
        "func": "if (msg.payload === \"Alarm\") {\n    msg.color = \"red\";  // Set color to red when in alarm\n} else if (msg.payload === \"Normal\") {\n    msg.color = \"green\";  // Set color to green when normal\n} else {\n    msg.color = \"white\";  // Default color if payload is missing or unexpected\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 160,
        "wires": [
            [
                "952a38f996be7ba6"
            ]
        ]
    },
    {
        "id": "5b495f012ab6202a",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 63",
        "func": "if (msg.payload === \"Alarm\") {\n    msg.color = \"red\";  // Set color to red when in alarm\n} else if (msg.payload === \"Normal\") {\n    msg.color = \"green\";  // Set color to green when normal\n} else {\n    msg.color = \"white\";  // Default color if payload is missing or unexpected\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 200,
        "wires": [
            [
                "a175d5dee267559a"
            ]
        ]
    },
    {
        "id": "9ce7aed21e3b708a",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 64",
        "func": "if (msg.payload === \"Alarm\") {\n    msg.color = \"red\";  // Set color to red when in alarm\n} else if (msg.payload === \"Normal\") {\n    msg.color = \"green\";  // Set color to green when normal\n} else {\n    msg.color = \"white\";  // Default color if payload is missing or unexpected\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 240,
        "wires": [
            [
                "d0256f49b5e654c7"
            ]
        ]
    },
    {
        "id": "bebccebeb1f8f96b",
        "type": "ui_template",
        "z": "ba1efa06ea05afc6",
        "group": "9c90a075584ede2b",
        "name": "HeatingStatus",
        "order": 37,
        "width": 7,
        "height": 1,
        "format": "<div style=\"color: rgb(0, 168, 168); font-size:16px;\">\n    HeatingStatus: <span style=\"color: {{msg.color || 'white'}};\">{{msg.payload || 'N/A'}}</span>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 3640,
        "y": 120,
        "wires": [
            [
                "e36017104cf0df2e"
            ]
        ]
    },
    {
        "id": "952a38f996be7ba6",
        "type": "ui_template",
        "z": "ba1efa06ea05afc6",
        "group": "9c90a075584ede2b",
        "name": "CoolingStatus",
        "order": 41,
        "width": 7,
        "height": 1,
        "format": "<div style=\"color: rgb(0, 168, 168); font-size:16px;\">\n    CoolingStatus: <span style=\"color: {{msg.color || 'white'}};\">{{msg.payload || 'N/A'}}</span>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 3640,
        "y": 160,
        "wires": [
            [
                "c09c36a6af42ff9a"
            ]
        ]
    },
    {
        "id": "a175d5dee267559a",
        "type": "ui_template",
        "z": "ba1efa06ea05afc6",
        "group": "9c90a075584ede2b",
        "name": "VentStatus",
        "order": 44,
        "width": 7,
        "height": 1,
        "format": "<div style=\"color: rgb(0, 168, 168); font-size:16px;\">\n    VentStatus: <span style=\"color: {{msg.color || 'white'}};\">{{msg.payload || 'N/A'}}</span>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 3630,
        "y": 200,
        "wires": [
            [
                "3450486ca95af896"
            ]
        ]
    },
    {
        "id": "d0256f49b5e654c7",
        "type": "ui_template",
        "z": "ba1efa06ea05afc6",
        "group": "9c90a075584ede2b",
        "name": "AlarmStatus",
        "order": 33,
        "width": 7,
        "height": 1,
        "format": "<div style=\"color: rgb(0, 168, 168); font-size:16px; font-family:Copperplate,Copperplate Gothic Light,fantasy;\">\n    AlarmStatus: <span style=\"color: {{msg.color || 'white'}};\">{{msg.payload || 'N/A'}}</span>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 3630,
        "y": 240,
        "wires": [
            [
                "6e38b30e3f417b15"
            ]
        ]
    },
    {
        "id": "f8708d77a5403a9c",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 65",
        "func": "if (msg.payload === \"Active\") {\n    msg.color = \"orange\";  // Set color to red when in alarm\n} else if (msg.payload === \"Inactive\") {\n    msg.color = \"0,168,168\";  // Set color to green when normal\n} else {\n    msg.color = \"white\";  // Default color if payload is missing or unexpected\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 280,
        "wires": [
            [
                "ec4a3d6f2afa9301"
            ]
        ]
    },
    {
        "id": "ec4a3d6f2afa9301",
        "type": "ui_template",
        "z": "ba1efa06ea05afc6",
        "group": "9c90a075584ede2b",
        "name": "Override Status",
        "order": 26,
        "width": 7,
        "height": 1,
        "format": "<div style=\"color: rgb(0, 168, 168); font-size:16px;\">\n    Alarm Override Status: <span style=\"color: {{msg.color || 'white'}};\">{{msg.payload || 'N/A'}}</span>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 3640,
        "y": 280,
        "wires": [
            [
                "6c9ec97b2dbef268"
            ]
        ]
    },
    {
        "id": "9935ee792d146516",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AlarmOverrideStatus",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "3",
                "fromt": "num",
                "to": "Active",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3165,
        "y": 500,
        "wires": [
            [
                "ab9fba833caf351e",
                "88f961f0ab9c9b8e"
            ]
        ],
        "l": false
    },
    {
        "id": "117a841b55173fb6",
        "type": "delay",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "pauseType": "delay",
        "timeout": "8",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2905,
        "y": 480,
        "wires": [
            [
                "907f2e714e53e056"
            ]
        ],
        "l": false
    },
    {
        "id": "907f2e714e53e056",
        "type": "change",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "3",
                "fromt": "num",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2875,
        "y": 520,
        "wires": [
            [
                "9935ee792d146516"
            ]
        ],
        "l": false
    },
    {
        "id": "ab9fba833caf351e",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 134",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3290,
        "y": 460,
        "wires": []
    },
    {
        "id": "f32a60ca7e51d4aa",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 135",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3190,
        "y": 320,
        "wires": []
    },
    {
        "id": "6c9ec97b2dbef268",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 136",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3830,
        "y": 320,
        "wires": []
    },
    {
        "id": "6e38b30e3f417b15",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 137",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3850,
        "y": 260,
        "wires": []
    },
    {
        "id": "18b6700bc10405a8",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2670,
        "y": 600,
        "wires": [
            [
                "33ea535dbc615ac5"
            ]
        ]
    },
    {
        "id": "e36017104cf0df2e",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 138",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3850,
        "y": 80,
        "wires": []
    },
    {
        "id": "c09c36a6af42ff9a",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 139",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3850,
        "y": 140,
        "wires": []
    },
    {
        "id": "3450486ca95af896",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 140",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3890,
        "y": 200,
        "wires": []
    },
    {
        "id": "cb07d0d2bf09947b",
        "type": "8relind",
        "z": "ba1efa06ea05afc6",
        "name": "Heat/Dehum Enable",
        "stack": "0",
        "relay": "3",
        "payload": "payload",
        "payloadType": "msg",
        "x": 3920,
        "y": 1080,
        "wires": [
            [
                "d5011e210a15d5a7",
                "c99c194f55278eba"
            ]
        ]
    },
    {
        "id": "2abbeb91cbb877d1",
        "type": "IND 0-10V out",
        "z": "ba1efa06ea05afc6",
        "name": "Maxitrol Gas Valve 0-10v",
        "stack": "0",
        "channel": "2",
        "payload": "payload",
        "payloadType": "msg",
        "x": 3890,
        "y": 1140,
        "wires": [
            [
                "5e8e95374bf6ba4f"
            ]
        ]
    },
    {
        "id": "5eef255b953786bb",
        "type": "delay",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3640,
        "y": 1060,
        "wires": [
            [
                "cb07d0d2bf09947b"
            ]
        ]
    },
    {
        "id": "6829ae5ded344b69",
        "type": "delay",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3640,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "ec1b0aae8ed97ad1",
        "type": "link in",
        "z": "ba1efa06ea05afc6",
        "name": "link in 5",
        "links": [],
        "x": 3175,
        "y": 1120,
        "wires": [
            [
                "41e5d8363d2f3fa0",
                "fc23b2a69d2b136b"
            ]
        ]
    },
    {
        "id": "b08dc90629c40ed4",
        "type": "ui_text",
        "z": "ba1efa06ea05afc6",
        "group": "9c90a075584ede2b",
        "order": 23,
        "width": 7,
        "height": 1,
        "name": "Gas Valve",
        "label": "Gas Valve",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#00a8a8",
        "x": 4250,
        "y": 1140,
        "wires": []
    },
    {
        "id": "5e8e95374bf6ba4f",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 66",
        "func": "// Check if msg.payload is 0\nif (msg.payload === 0) {\n    msg.payload = \"Valve Off\";  // Send Valve Off for value 0\n}\n// Check if msg.payload is between 1 and 4\nelse if (msg.payload >= 1 && msg.payload <= 4) {\n    msg.payload = \"LowFire\";  // Send LowFire for values between 1 and 4\n}\n// Check if msg.payload is between 5 and 10\nelse if (msg.payload >= 5 && msg.payload <= 10) {\n    msg.payload = \"HighFire\";  // Send HighFire for values between 5 and 10\n}\n// If msg.payload is outside the defined ranges, log a warning\nelse {\n    node.warn(\"Invalid value for msg.payload: \" + msg.payload);\n    return null;  // Optionally return null to stop further processing\n}\n\n// Return the modified message with Valve Off, LowFire, or HighFire\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4090,
        "y": 1140,
        "wires": [
            [
                "b08dc90629c40ed4"
            ]
        ]
    },
    {
        "id": "ba3fe0d0930a2600",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 3735,
        "y": 1000,
        "wires": [
            [
                "cb07d0d2bf09947b",
                "2abbeb91cbb877d1"
            ]
        ],
        "l": false
    },
    {
        "id": "f2f3b0365c2d3b5f",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 3735,
        "y": 960,
        "wires": [
            [
                "cb07d0d2bf09947b"
            ]
        ],
        "l": false
    },
    {
        "id": "11519de7eba9092a",
        "type": "function",
        "z": "ba1efa06ea05afc6",
        "name": "function 67",
        "func": "// Check if the incoming msg.payload is greater than 1\nif (msg.payload > 1) {\n    msg.payload = 1;  // Set payload to 1 if it's greater than 1\n} else {\n    msg.payload = 0;  // Set payload to 0 if it's 1 or less\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3930,
        "y": 1180,
        "wires": [
            [
                "d5c36873990d84ea"
            ]
        ]
    },
    {
        "id": "95f3345b68e6d46f",
        "type": "delay",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3780,
        "y": 1180,
        "wires": [
            [
                "11519de7eba9092a"
            ]
        ]
    },
    {
        "id": "96baf12994bab536",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 3555,
        "y": 1160,
        "wires": [
            [
                "2abbeb91cbb877d1"
            ]
        ],
        "l": false
    },
    {
        "id": "aa1b0b5e087019d3",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 3425,
        "y": 1160,
        "wires": [
            [
                "2abbeb91cbb877d1"
            ]
        ],
        "l": false
    },
    {
        "id": "1a66a9157f05a17e",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 3495,
        "y": 1160,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "468b4f24b31a2d48",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 3665,
        "y": 1160,
        "wires": [
            [
                "2abbeb91cbb877d1"
            ]
        ],
        "l": false
    },
    {
        "id": "5d528acb7185a47f",
        "type": "inject",
        "z": "ba1efa06ea05afc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 3615,
        "y": 1160,
        "wires": [
            [
                "2abbeb91cbb877d1"
            ]
        ],
        "l": false
    },
    {
        "id": "6d59dd0a18b80774",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 141",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 970,
        "y": 1120,
        "wires": []
    },
    {
        "id": "7d9fd08efa740637",
        "type": "mqtt out",
        "z": "ba1efa06ea05afc6",
        "name": "BuildingPressure",
        "topic": "BuildingPressure",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4e6f2ba88648f53e",
        "x": 3290,
        "y": 700,
        "wires": []
    },
    {
        "id": "49b6d1f3d051d80b",
        "type": "mqtt out",
        "z": "ba1efa06ea05afc6",
        "name": "VFDSpeed",
        "topic": "VFDSpeed",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4e6f2ba88648f53e",
        "x": 3990,
        "y": 600,
        "wires": []
    },
    {
        "id": "fc23b2a69d2b136b",
        "type": "debug",
        "z": "ba1efa06ea05afc6",
        "name": "debug 142",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3310,
        "y": 1120,
        "wires": []
    },
    {
        "id": "9c90a075584ede2b",
        "type": "ui_group",
        "name": "ElementMua1",
        "tab": "f394bc89e321d6f1",
        "order": 2,
        "disp": true,
        "width": 29,
        "collapse": true,
        "className": ""
    },
    {
        "id": "4e6f2ba88648f53e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.113.116",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "3",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f394bc89e321d6f1",
        "type": "ui_tab",
        "name": "AutoMata @ ElementMua1",
        "icon": "dashboard",
        "disabled": false,
        "hidden": true
    }
]
