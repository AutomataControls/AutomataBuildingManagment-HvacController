// Retrieve the global VFDspeed, or default to building pressure control if not set
var globalVFDspeed = global.get('VFDspeed');

if (globalVFDspeed === null || globalVFDspeed === undefined) {
    // If no global VFD speed is set, switch to vent mode (pressure-based control)
    var buildingPressure = msg.payload.pressure;

    // Retrieve HvacState and ActiveSwitchState from global context
    var hvacState = global.get('HvacState');
    var activeSwitchState = global.get('ActiveSwitchState');

    // Smoothing logic for building pressure
    var smoothingWindow = 5;
    if (context.get('pressureReadings') === undefined) {
        context.set('pressureReadings', []);
    }
    var pressureReadings = context.get('pressureReadings');
    pressureReadings.push(buildingPressure);
    if (pressureReadings.length > smoothingWindow) {
        pressureReadings.shift();
    }
    var smoothedPressure = pressureReadings.reduce((a, b) => a + b, 0) / pressureReadings.length;
    context.set('pressureReadings', pressureReadings);

    // Define the target building pressure range (in "wc")
    var minPressure = -0.50;  // Lower threshold
    var maxPressure = 1.0;    // Upper threshold

    // Define the VFD control output range (0-10V)
    var minVFDOutput = 2.7; // Minimum VFD output for minimum speed
    var maxVFDOutput = 10;  // Maximum VFD output for maximum speed

    // Calculate VFD output for vent mode based on building pressure
    var vfdOutput = ((smoothedPressure - minPressure) / (maxPressure - minPressure)) * (maxVFDOutput - minVFDOutput) + minVFDOutput;

    msg.payload = vfdOutput.toFixed(2); // Round to 2 decimal places for precision
} else {
    // Use global VFD speed from cooling logic
    msg.payload = (globalVFDspeed / 100) * 10;  // Convert to 0-10V
}

// Set the VFD output and update status
node.status({ fill: "green", shape: "dot", text: "VFD Output: " + msg.payload + "V" });
return msg;
